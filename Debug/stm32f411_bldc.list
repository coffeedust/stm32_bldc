
stm32f411_bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006528  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080066c0  080066c0  000076c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068e0  080068e0  00008080  2**0
                  CONTENTS
  4 .ARM          00000008  080068e0  080068e0  000078e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068e8  080068e8  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068e8  080068e8  000078e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068ec  080068ec  000078ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080068f0  00008000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000080  08006970  00008080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006970  00008330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e47f  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229c  00000000  00000000  0001652f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000187d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0c  00000000  00000000  000194b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f1f  00000000  00000000  00019ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcc1  00000000  00000000  00030de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e337  00000000  00000000  00040aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ceddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d60  00000000  00000000  000cee20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d2b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080066a8 	.word	0x080066a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080066a8 	.word	0x080066a8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bb4:	f000 b96a 	b.w	8000e8c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	460c      	mov	r4, r1
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d14e      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bdc:	4694      	mov	ip, r2
 8000bde:	458c      	cmp	ip, r1
 8000be0:	4686      	mov	lr, r0
 8000be2:	fab2 f282 	clz	r2, r2
 8000be6:	d962      	bls.n	8000cae <__udivmoddi4+0xde>
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0320 	rsb	r3, r2, #32
 8000bee:	4091      	lsls	r1, r2
 8000bf0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	4319      	orrs	r1, r3
 8000bfa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f f68c 	uxth.w	r6, ip
 8000c06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c16:	fb04 f106 	mul.w	r1, r4, r6
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c26:	f080 8112 	bcs.w	8000e4e <__udivmoddi4+0x27e>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 810f 	bls.w	8000e4e <__udivmoddi4+0x27e>
 8000c30:	3c02      	subs	r4, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a59      	subs	r1, r3, r1
 8000c36:	fa1f f38e 	uxth.w	r3, lr
 8000c3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c46:	fb00 f606 	mul.w	r6, r0, r6
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x94>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c56:	f080 80fc 	bcs.w	8000e52 <__udivmoddi4+0x282>
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	f240 80f9 	bls.w	8000e52 <__udivmoddi4+0x282>
 8000c60:	4463      	add	r3, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	1b9b      	subs	r3, r3, r6
 8000c66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11d      	cbz	r5, 8000c76 <__udivmoddi4+0xa6>
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	2200      	movs	r2, #0
 8000c72:	e9c5 3200 	strd	r3, r2, [r5]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d905      	bls.n	8000c8a <__udivmoddi4+0xba>
 8000c7e:	b10d      	cbz	r5, 8000c84 <__udivmoddi4+0xb4>
 8000c80:	e9c5 0100 	strd	r0, r1, [r5]
 8000c84:	2100      	movs	r1, #0
 8000c86:	4608      	mov	r0, r1
 8000c88:	e7f5      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000c8a:	fab3 f183 	clz	r1, r3
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d146      	bne.n	8000d20 <__udivmoddi4+0x150>
 8000c92:	42a3      	cmp	r3, r4
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xcc>
 8000c96:	4290      	cmp	r0, r2
 8000c98:	f0c0 80f0 	bcc.w	8000e7c <__udivmoddi4+0x2ac>
 8000c9c:	1a86      	subs	r6, r0, r2
 8000c9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d0e6      	beq.n	8000c76 <__udivmoddi4+0xa6>
 8000ca8:	e9c5 6300 	strd	r6, r3, [r5]
 8000cac:	e7e3      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000cae:	2a00      	cmp	r2, #0
 8000cb0:	f040 8090 	bne.w	8000dd4 <__udivmoddi4+0x204>
 8000cb4:	eba1 040c 	sub.w	r4, r1, ip
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cca:	fb08 4416 	mls	r4, r8, r6, r4
 8000cce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cd2:	fb07 f006 	mul.w	r0, r7, r6
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x11c>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x11a>
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cea:	4626      	mov	r6, r4
 8000cec:	1a1c      	subs	r4, r3, r0
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cf6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfe:	fb00 f707 	mul.w	r7, r0, r7
 8000d02:	429f      	cmp	r7, r3
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x148>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x146>
 8000d10:	429f      	cmp	r7, r3
 8000d12:	f200 80b0 	bhi.w	8000e76 <__udivmoddi4+0x2a6>
 8000d16:	4620      	mov	r0, r4
 8000d18:	1bdb      	subs	r3, r3, r7
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	e7a5      	b.n	8000c6c <__udivmoddi4+0x9c>
 8000d20:	f1c1 0620 	rsb	r6, r1, #32
 8000d24:	408b      	lsls	r3, r1
 8000d26:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2a:	431f      	orrs	r7, r3
 8000d2c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d30:	fa04 f301 	lsl.w	r3, r4, r1
 8000d34:	ea43 030c 	orr.w	r3, r3, ip
 8000d38:	40f4      	lsrs	r4, r6
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	0c38      	lsrs	r0, r7, #16
 8000d40:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d44:	fbb4 fef0 	udiv	lr, r4, r0
 8000d48:	fa1f fc87 	uxth.w	ip, r7
 8000d4c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d50:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d54:	fb0e f90c 	mul.w	r9, lr, ip
 8000d58:	45a1      	cmp	r9, r4
 8000d5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5e:	d90a      	bls.n	8000d76 <__udivmoddi4+0x1a6>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d66:	f080 8084 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000d6a:	45a1      	cmp	r9, r4
 8000d6c:	f240 8081 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000d70:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d74:	443c      	add	r4, r7
 8000d76:	eba4 0409 	sub.w	r4, r4, r9
 8000d7a:	fa1f f983 	uxth.w	r9, r3
 8000d7e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d82:	fb00 4413 	mls	r4, r0, r3, r4
 8000d86:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x1d2>
 8000d92:	193c      	adds	r4, r7, r4
 8000d94:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d98:	d267      	bcs.n	8000e6a <__udivmoddi4+0x29a>
 8000d9a:	45a4      	cmp	ip, r4
 8000d9c:	d965      	bls.n	8000e6a <__udivmoddi4+0x29a>
 8000d9e:	3b02      	subs	r3, #2
 8000da0:	443c      	add	r4, r7
 8000da2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000da6:	fba0 9302 	umull	r9, r3, r0, r2
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	429c      	cmp	r4, r3
 8000db0:	46ce      	mov	lr, r9
 8000db2:	469c      	mov	ip, r3
 8000db4:	d351      	bcc.n	8000e5a <__udivmoddi4+0x28a>
 8000db6:	d04e      	beq.n	8000e56 <__udivmoddi4+0x286>
 8000db8:	b155      	cbz	r5, 8000dd0 <__udivmoddi4+0x200>
 8000dba:	ebb8 030e 	subs.w	r3, r8, lr
 8000dbe:	eb64 040c 	sbc.w	r4, r4, ip
 8000dc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc6:	40cb      	lsrs	r3, r1
 8000dc8:	431e      	orrs	r6, r3
 8000dca:	40cc      	lsrs	r4, r1
 8000dcc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e750      	b.n	8000c76 <__udivmoddi4+0xa6>
 8000dd4:	f1c2 0320 	rsb	r3, r2, #32
 8000dd8:	fa20 f103 	lsr.w	r1, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	fa24 f303 	lsr.w	r3, r4, r3
 8000de4:	4094      	lsls	r4, r2
 8000de6:	430c      	orrs	r4, r1
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df0:	fa1f f78c 	uxth.w	r7, ip
 8000df4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dfc:	0c23      	lsrs	r3, r4, #16
 8000dfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e02:	fb00 f107 	mul.w	r1, r0, r7
 8000e06:	4299      	cmp	r1, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x24c>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e12:	d22c      	bcs.n	8000e6e <__udivmoddi4+0x29e>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	d92a      	bls.n	8000e6e <__udivmoddi4+0x29e>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e24:	fb08 3311 	mls	r3, r8, r1, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb01 f307 	mul.w	r3, r1, r7
 8000e30:	42a3      	cmp	r3, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x276>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e3c:	d213      	bcs.n	8000e66 <__udivmoddi4+0x296>
 8000e3e:	42a3      	cmp	r3, r4
 8000e40:	d911      	bls.n	8000e66 <__udivmoddi4+0x296>
 8000e42:	3902      	subs	r1, #2
 8000e44:	4464      	add	r4, ip
 8000e46:	1ae4      	subs	r4, r4, r3
 8000e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e4c:	e739      	b.n	8000cc2 <__udivmoddi4+0xf2>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	e6f0      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e706      	b.n	8000c64 <__udivmoddi4+0x94>
 8000e56:	45c8      	cmp	r8, r9
 8000e58:	d2ae      	bcs.n	8000db8 <__udivmoddi4+0x1e8>
 8000e5a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e5e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e62:	3801      	subs	r0, #1
 8000e64:	e7a8      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e66:	4631      	mov	r1, r6
 8000e68:	e7ed      	b.n	8000e46 <__udivmoddi4+0x276>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	e799      	b.n	8000da2 <__udivmoddi4+0x1d2>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e7d4      	b.n	8000e1c <__udivmoddi4+0x24c>
 8000e72:	46d6      	mov	lr, sl
 8000e74:	e77f      	b.n	8000d76 <__udivmoddi4+0x1a6>
 8000e76:	4463      	add	r3, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e74d      	b.n	8000d18 <__udivmoddi4+0x148>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	4623      	mov	r3, r4
 8000e80:	4608      	mov	r0, r1
 8000e82:	e70f      	b.n	8000ca4 <__udivmoddi4+0xd4>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	e730      	b.n	8000cec <__udivmoddi4+0x11c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <delayUs>:
extern TIM_HandleTypeDef	htim1;
extern TIM_HandleTypeDef	htim11;

extern int countChangeAngle;

void delayUs(int t) {
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	htim11.Instance->CNT = 0;
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <delayUs+0x2c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	@ 0x24
	while(htim11.Instance->CNT < t);
 8000ea0:	bf00      	nop
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <delayUs+0x2c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d3f9      	bcc.n	8000ea2 <delayUs+0x12>
}
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	200000f0 	.word	0x200000f0

08000ec0 <app>:

void app() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
	// uart 초기화
	initUart(&huart2);
 8000ec6:	4818      	ldr	r0, [pc, #96]	@ (8000f28 <app+0x68>)
 8000ec8:	f000 fdda 	bl	8001a80 <initUart>
	// bldc 초기화
	initBldc(&htim1);
 8000ecc:	4817      	ldr	r0, [pc, #92]	@ (8000f2c <app+0x6c>)
 8000ece:	f000 f87f 	bl	8000fd0 <initBldc>
	setVoltage(30);	// 10 ~
 8000ed2:	201e      	movs	r0, #30
 8000ed4:	f000 f8a6 	bl	8001024 <setVoltage>
	HAL_TIM_Base_Start(&htim11);
 8000ed8:	4815      	ldr	r0, [pc, #84]	@ (8000f30 <app+0x70>)
 8000eda:	f001 fe6d 	bl	8002bb8 <HAL_TIM_Base_Start>
	while(1) {
		// 초기 회전을 원하는 각도 입력
  	static float angle = 360;
  	float resultValue = updateBldc(angle);
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <app+0x74>)
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee8:	f000 f8b2 	bl	8001050 <updateBldc>
 8000eec:	ed87 0a01 	vstr	s0, [r7, #4]
  	delayUs(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff ffcd 	bl	8000e90 <delayUs>
  	if(resultValue == 360) {
 8000ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000efa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000f38 <app+0x78>
 8000efe:	eef4 7a47 	vcmp.f32	s15, s14
 8000f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f06:	d103      	bne.n	8000f10 <app+0x50>
  		angle = 0;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <app+0x74>)
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
  	}
  	if(resultValue == 0) {
 8000f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d1df      	bne.n	8000ede <app+0x1e>
  		angle = 360;
 8000f1e:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <app+0x74>)
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <app+0x7c>)
 8000f22:	601a      	str	r2, [r3, #0]
	while(1) {
 8000f24:	e7db      	b.n	8000ede <app+0x1e>
 8000f26:	bf00      	nop
 8000f28:	20000138 	.word	0x20000138
 8000f2c:	200000a8 	.word	0x200000a8
 8000f30:	200000f0 	.word	0x200000f0
 8000f34:	20000000 	.word	0x20000000
 8000f38:	43b40000 	.word	0x43b40000
 8000f3c:	43b40000 	.word	0x43b40000

08000f40 <roundToDecimal>:
const float incAngle = 0.5;
float dU = 0;
float dV = 120;
float dW = 240;

float roundToDecimal(float value, int decimalPlaces) {
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f4a:	6038      	str	r0, [r7, #0]
	float scale = pow(10, decimalPlaces);
 8000f4c:	6838      	ldr	r0, [r7, #0]
 8000f4e:	f7ff fa95 	bl	800047c <__aeabi_i2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	ec43 2b11 	vmov	d1, r2, r3
 8000f5a:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8000fc8 <roundToDecimal+0x88>
 8000f5e:	f003 fc57 	bl	8004810 <pow>
 8000f62:	ec53 2b10 	vmov	r2, r3, d0
 8000f66:	4610      	mov	r0, r2
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff fdc9 	bl	8000b00 <__aeabi_d2f>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60fb      	str	r3, [r7, #12]
	return round(value * scale) / scale;
 8000f72:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	ee17 0a90 	vmov	r0, s15
 8000f82:	f7ff fa8d 	bl	80004a0 <__aeabi_f2d>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	ec43 2b10 	vmov	d0, r2, r3
 8000f8e:	f003 fd0f 	bl	80049b0 <round>
 8000f92:	ec55 4b10 	vmov	r4, r5, d0
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff fa82 	bl	80004a0 <__aeabi_f2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff fbfe 	bl	80007a4 <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fda6 	bl	8000b00 <__aeabi_d2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	00000000 	.word	0x00000000
 8000fcc:	40240000 	.word	0x40240000

08000fd0 <initBldc>:

void initBldc(TIM_HandleTypeDef *tim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	timMotor = tim;
 8000fd8:	4a10      	ldr	r2, [pc, #64]	@ (800101c <initBldc+0x4c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(timMotor, TIM_CHANNEL_1);
 8000fde:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <initBldc+0x4c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fe9b 	bl	8002d20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timMotor, TIM_CHANNEL_2);
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <initBldc+0x4c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fe95 	bl	8002d20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timMotor, TIM_CHANNEL_3);
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <initBldc+0x4c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f001 fe8f 	bl	8002d20 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(MotorEnable_GPIO_Port, MotorEnable_Pin, 1);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <initBldc+0x50>)
 800100a:	f001 f913 	bl	8002234 <HAL_GPIO_WritePin>
  resetBldc();
 800100e:	f000 f9cf 	bl	80013b0 <resetBldc>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000009c 	.word	0x2000009c
 8001020:	40020400 	.word	0x40020400

08001024 <setVoltage>:

void setVoltage(uint8_t inVoltage) {
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	voltage = (inVoltage * 5) - 1;
 800102e:	79fa      	ldrb	r2, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3b01      	subs	r3, #1
 8001038:	4a03      	ldr	r2, [pc, #12]	@ (8001048 <setVoltage+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000004 	.word	0x20000004
 800104c:	00000000 	.word	0x00000000

08001050 <updateBldc>:

float updateBldc(float inDegree) {
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	ed87 0a01 	vstr	s0, [r7, #4]
	const int polePair = 11; // pole pair 7
 800105a:	230b      	movs	r3, #11
 800105c:	617b      	str	r3, [r7, #20]
	inDegree *= polePair;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001068:	ed97 7a01 	vldr	s14, [r7, #4]
 800106c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001070:	edc7 7a01 	vstr	s15, [r7, #4]
	if(fabs(inDegree - currentDegree) < 0.1f) return currentDegree / polePair;
 8001074:	4bc6      	ldr	r3, [pc, #792]	@ (8001390 <updateBldc+0x340>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ed97 7a01 	vldr	s14, [r7, #4]
 800107e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001082:	eef0 7ae7 	vabs.f32	s15, s15
 8001086:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 8001394 <updateBldc+0x344>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	d50a      	bpl.n	80010aa <updateBldc+0x5a>
 8001094:	4bbe      	ldr	r3, [pc, #760]	@ (8001390 <updateBldc+0x340>)
 8001096:	edd3 6a00 	vldr	s13, [r3]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a8:	e162      	b.n	8001370 <updateBldc+0x320>
	else if(inDegree > currentDegree) {
 80010aa:	4bb9      	ldr	r3, [pc, #740]	@ (8001390 <updateBldc+0x340>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	dd28      	ble.n	8001110 <updateBldc+0xc0>
		dU += incAngle;
 80010be:	4bb6      	ldr	r3, [pc, #728]	@ (8001398 <updateBldc+0x348>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010cc:	4bb2      	ldr	r3, [pc, #712]	@ (8001398 <updateBldc+0x348>)
 80010ce:	edc3 7a00 	vstr	s15, [r3]
		dV += incAngle;
 80010d2:	4bb2      	ldr	r3, [pc, #712]	@ (800139c <updateBldc+0x34c>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010e0:	4bae      	ldr	r3, [pc, #696]	@ (800139c <updateBldc+0x34c>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]
		dW += incAngle;
 80010e6:	4bae      	ldr	r3, [pc, #696]	@ (80013a0 <updateBldc+0x350>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	4baa      	ldr	r3, [pc, #680]	@ (80013a0 <updateBldc+0x350>)
 80010f6:	edc3 7a00 	vstr	s15, [r3]
		currentDegree += incAngle;
 80010fa:	4ba5      	ldr	r3, [pc, #660]	@ (8001390 <updateBldc+0x340>)
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001108:	4ba1      	ldr	r3, [pc, #644]	@ (8001390 <updateBldc+0x340>)
 800110a:	edc3 7a00 	vstr	s15, [r3]
 800110e:	e031      	b.n	8001174 <updateBldc+0x124>
	}
	else if(inDegree < currentDegree) {
 8001110:	4b9f      	ldr	r3, [pc, #636]	@ (8001390 <updateBldc+0x340>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ed97 7a01 	vldr	s14, [r7, #4]
 800111a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	d527      	bpl.n	8001174 <updateBldc+0x124>
		dU -= incAngle;
 8001124:	4b9c      	ldr	r3, [pc, #624]	@ (8001398 <updateBldc+0x348>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800112e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001132:	4b99      	ldr	r3, [pc, #612]	@ (8001398 <updateBldc+0x348>)
 8001134:	edc3 7a00 	vstr	s15, [r3]
		dV -= incAngle;
 8001138:	4b98      	ldr	r3, [pc, #608]	@ (800139c <updateBldc+0x34c>)
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001146:	4b95      	ldr	r3, [pc, #596]	@ (800139c <updateBldc+0x34c>)
 8001148:	edc3 7a00 	vstr	s15, [r3]
		dW -= incAngle;
 800114c:	4b94      	ldr	r3, [pc, #592]	@ (80013a0 <updateBldc+0x350>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800115a:	4b91      	ldr	r3, [pc, #580]	@ (80013a0 <updateBldc+0x350>)
 800115c:	edc3 7a00 	vstr	s15, [r3]
		currentDegree -= incAngle;
 8001160:	4b8b      	ldr	r3, [pc, #556]	@ (8001390 <updateBldc+0x340>)
 8001162:	edd3 7a00 	vldr	s15, [r3]
 8001166:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800116a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800116e:	4b88      	ldr	r3, [pc, #544]	@ (8001390 <updateBldc+0x340>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
	}

	dU = roundToDecimal(dU, 1);
 8001174:	4b88      	ldr	r3, [pc, #544]	@ (8001398 <updateBldc+0x348>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	2001      	movs	r0, #1
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	f7ff fede 	bl	8000f40 <roundToDecimal>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	4b83      	ldr	r3, [pc, #524]	@ (8001398 <updateBldc+0x348>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
	dV = roundToDecimal(dV, 1);
 800118e:	4b83      	ldr	r3, [pc, #524]	@ (800139c <updateBldc+0x34c>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	2001      	movs	r0, #1
 8001196:	eeb0 0a67 	vmov.f32	s0, s15
 800119a:	f7ff fed1 	bl	8000f40 <roundToDecimal>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b7e      	ldr	r3, [pc, #504]	@ (800139c <updateBldc+0x34c>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
	dW = roundToDecimal(dW, 1);
 80011a8:	4b7d      	ldr	r3, [pc, #500]	@ (80013a0 <updateBldc+0x350>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	2001      	movs	r0, #1
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	f7ff fec4 	bl	8000f40 <roundToDecimal>
 80011b8:	eef0 7a40 	vmov.f32	s15, s0
 80011bc:	4b78      	ldr	r3, [pc, #480]	@ (80013a0 <updateBldc+0x350>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
	currentDegree = roundToDecimal(currentDegree, 1);
 80011c2:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <updateBldc+0x340>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	2001      	movs	r0, #1
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	f7ff feb7 	bl	8000f40 <roundToDecimal>
 80011d2:	eef0 7a40 	vmov.f32	s15, s0
 80011d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001390 <updateBldc+0x340>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	int pwmValueU = sin(dU * M_PI / 180) * voltage + 499;
 80011dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001398 <updateBldc+0x348>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f95d 	bl	80004a0 <__aeabi_f2d>
 80011e6:	a366      	add	r3, pc, #408	@ (adr r3, 8001380 <updateBldc+0x330>)
 80011e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ec:	f7ff f9b0 	bl	8000550 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	4b69      	ldr	r3, [pc, #420]	@ (80013a4 <updateBldc+0x354>)
 80011fe:	f7ff fad1 	bl	80007a4 <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	ec43 2b17 	vmov	d7, r2, r3
 800120a:	eeb0 0a47 	vmov.f32	s0, s14
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	f003 fb79 	bl	8004908 <sin>
 8001216:	ec55 4b10 	vmov	r4, r5, d0
 800121a:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <updateBldc+0x358>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f92c 	bl	800047c <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f7ff f990 	bl	8000550 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	a353      	add	r3, pc, #332	@ (adr r3, 8001388 <updateBldc+0x338>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7fe ffd1 	bl	80001e4 <__adddf3>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f7ff fc31 	bl	8000ab0 <__aeabi_d2iz>
 800124e:	4603      	mov	r3, r0
 8001250:	613b      	str	r3, [r7, #16]
	int pwmValueV = sin(dV * M_PI / 180) * voltage + 499;
 8001252:	4b52      	ldr	r3, [pc, #328]	@ (800139c <updateBldc+0x34c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f922 	bl	80004a0 <__aeabi_f2d>
 800125c:	a348      	add	r3, pc, #288	@ (adr r3, 8001380 <updateBldc+0x330>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f975 	bl	8000550 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b4c      	ldr	r3, [pc, #304]	@ (80013a4 <updateBldc+0x354>)
 8001274:	f7ff fa96 	bl	80007a4 <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	ec43 2b17 	vmov	d7, r2, r3
 8001280:	eeb0 0a47 	vmov.f32	s0, s14
 8001284:	eef0 0a67 	vmov.f32	s1, s15
 8001288:	f003 fb3e 	bl	8004908 <sin>
 800128c:	ec55 4b10 	vmov	r4, r5, d0
 8001290:	4b45      	ldr	r3, [pc, #276]	@ (80013a8 <updateBldc+0x358>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f8f1 	bl	800047c <__aeabi_i2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4620      	mov	r0, r4
 80012a0:	4629      	mov	r1, r5
 80012a2:	f7ff f955 	bl	8000550 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	a336      	add	r3, pc, #216	@ (adr r3, 8001388 <updateBldc+0x338>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7fe ff96 	bl	80001e4 <__adddf3>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fbf6 	bl	8000ab0 <__aeabi_d2iz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	60fb      	str	r3, [r7, #12]
	int pwmValueW = sin(dW * M_PI / 180) * voltage + 499;
 80012c8:	4b35      	ldr	r3, [pc, #212]	@ (80013a0 <updateBldc+0x350>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f8e7 	bl	80004a0 <__aeabi_f2d>
 80012d2:	a32b      	add	r3, pc, #172	@ (adr r3, 8001380 <updateBldc+0x330>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff f93a 	bl	8000550 <__aeabi_dmul>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <updateBldc+0x354>)
 80012ea:	f7ff fa5b 	bl	80007a4 <__aeabi_ddiv>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	ec43 2b17 	vmov	d7, r2, r3
 80012f6:	eeb0 0a47 	vmov.f32	s0, s14
 80012fa:	eef0 0a67 	vmov.f32	s1, s15
 80012fe:	f003 fb03 	bl	8004908 <sin>
 8001302:	ec55 4b10 	vmov	r4, r5, d0
 8001306:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <updateBldc+0x358>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f8b6 	bl	800047c <__aeabi_i2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4620      	mov	r0, r4
 8001316:	4629      	mov	r1, r5
 8001318:	f7ff f91a 	bl	8000550 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4610      	mov	r0, r2
 8001322:	4619      	mov	r1, r3
 8001324:	a318      	add	r3, pc, #96	@ (adr r3, 8001388 <updateBldc+0x338>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7fe ff5b 	bl	80001e4 <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fbbb 	bl	8000ab0 <__aeabi_d2iz>
 800133a:	4603      	mov	r3, r0
 800133c:	60bb      	str	r3, [r7, #8]
	timMotor->Instance->CCR1 = pwmValueU;
 800133e:	4b1b      	ldr	r3, [pc, #108]	@ (80013ac <updateBldc+0x35c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	635a      	str	r2, [r3, #52]	@ 0x34
	timMotor->Instance->CCR2 = pwmValueV;
 8001348:	4b18      	ldr	r3, [pc, #96]	@ (80013ac <updateBldc+0x35c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	639a      	str	r2, [r3, #56]	@ 0x38
	timMotor->Instance->CCR3 = pwmValueW;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <updateBldc+0x35c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
	return currentDegree / polePair;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <updateBldc+0x340>)
 800135e:	edd3 6a00 	vldr	s13, [r3]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800136c:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bdb0      	pop	{r4, r5, r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	54442d18 	.word	0x54442d18
 8001384:	400921fb 	.word	0x400921fb
 8001388:	00000000 	.word	0x00000000
 800138c:	407f3000 	.word	0x407f3000
 8001390:	200000a0 	.word	0x200000a0
 8001394:	3dcccccd 	.word	0x3dcccccd
 8001398:	200000a4 	.word	0x200000a4
 800139c:	20000008 	.word	0x20000008
 80013a0:	2000000c 	.word	0x2000000c
 80013a4:	40668000 	.word	0x40668000
 80013a8:	20000004 	.word	0x20000004
 80013ac:	2000009c 	.word	0x2000009c

080013b0 <resetBldc>:

void resetBldc() {
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	dU = 0;
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <resetBldc+0x2c>)
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
	dV = 120;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <resetBldc+0x30>)
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <resetBldc+0x34>)
 80013c0:	601a      	str	r2, [r3, #0]
	dW = 240;
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <resetBldc+0x38>)
 80013c4:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <resetBldc+0x3c>)
 80013c6:	601a      	str	r2, [r3, #0]
	currentDegree = 0;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <resetBldc+0x40>)
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	200000a4 	.word	0x200000a4
 80013e0:	20000008 	.word	0x20000008
 80013e4:	42f00000 	.word	0x42f00000
 80013e8:	2000000c 	.word	0x2000000c
 80013ec:	43700000 	.word	0x43700000
 80013f0:	200000a0 	.word	0x200000a0

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f8:	f000 fb82 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fc:	f000 f80c 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001400:	f000 f978 	bl	80016f4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001404:	f000 f870 	bl	80014e8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001408:	f000 f94a 	bl	80016a0 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800140c:	f000 f924 	bl	8001658 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  app();
 8001410:	f7ff fd56 	bl	8000ec0 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <main+0x20>

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b094      	sub	sp, #80	@ 0x50
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2230      	movs	r2, #48	@ 0x30
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f003 f9c0 	bl	80047ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <SystemClock_Config+0xc8>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	4a26      	ldr	r2, [pc, #152]	@ (80014e0 <SystemClock_Config+0xc8>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800144a:	6413      	str	r3, [r2, #64]	@ 0x40
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <SystemClock_Config+0xc8>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <SystemClock_Config+0xcc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a20      	ldr	r2, [pc, #128]	@ (80014e4 <SystemClock_Config+0xcc>)
 8001462:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <SystemClock_Config+0xcc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001474:	2302      	movs	r3, #2
 8001476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001478:	2301      	movs	r3, #1
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800147c:	2310      	movs	r3, #16
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001480:	2302      	movs	r3, #2
 8001482:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001484:	2300      	movs	r3, #0
 8001486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001488:	2308      	movs	r3, #8
 800148a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800148c:	2350      	movs	r3, #80	@ 0x50
 800148e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001490:	2302      	movs	r3, #2
 8001492:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001494:	2304      	movs	r3, #4
 8001496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fee3 	bl	8002268 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a8:	f000 f968 	bl	800177c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	230f      	movs	r3, #15
 80014ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b0:	2302      	movs	r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2101      	movs	r1, #1
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f945 	bl	8002758 <HAL_RCC_ClockConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80014d4:	f000 f952 	bl	800177c <Error_Handler>
  }
}
 80014d8:	bf00      	nop
 80014da:	3750      	adds	r7, #80	@ 0x50
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000

080014e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b096      	sub	sp, #88	@ 0x58
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]
 8001518:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2220      	movs	r2, #32
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f003 f943 	bl	80047ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001526:	4b4a      	ldr	r3, [pc, #296]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001528:	4a4a      	ldr	r2, [pc, #296]	@ (8001654 <MX_TIM1_Init+0x16c>)
 800152a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800152c:	4b48      	ldr	r3, [pc, #288]	@ (8001650 <MX_TIM1_Init+0x168>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	4b47      	ldr	r3, [pc, #284]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001538:	4b45      	ldr	r3, [pc, #276]	@ (8001650 <MX_TIM1_Init+0x168>)
 800153a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001540:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001546:	4b42      	ldr	r3, [pc, #264]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b40      	ldr	r3, [pc, #256]	@ (8001650 <MX_TIM1_Init+0x168>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001552:	483f      	ldr	r0, [pc, #252]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001554:	f001 fae0 	bl	8002b18 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800155e:	f000 f90d 	bl	800177c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001566:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800156c:	4619      	mov	r1, r3
 800156e:	4838      	ldr	r0, [pc, #224]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001570:	f001 fd48 	bl	8003004 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800157a:	f000 f8ff 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800157e:	4834      	ldr	r0, [pc, #208]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001580:	f001 fb74 	bl	8002c6c <HAL_TIM_PWM_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800158a:	f000 f8f7 	bl	800177c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158e:	2300      	movs	r3, #0
 8001590:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001596:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800159a:	4619      	mov	r1, r3
 800159c:	482c      	ldr	r0, [pc, #176]	@ (8001650 <MX_TIM1_Init+0x168>)
 800159e:	f002 f8d1 	bl	8003744 <HAL_TIMEx_MasterConfigSynchronization>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a8:	f000 f8e8 	bl	800177c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ac:	2360      	movs	r3, #96	@ 0x60
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	2200      	movs	r2, #0
 80015ce:	4619      	mov	r1, r3
 80015d0:	481f      	ldr	r0, [pc, #124]	@ (8001650 <MX_TIM1_Init+0x168>)
 80015d2:	f001 fc55 	bl	8002e80 <HAL_TIM_PWM_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015dc:	f000 f8ce 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e4:	2204      	movs	r2, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4819      	ldr	r0, [pc, #100]	@ (8001650 <MX_TIM1_Init+0x168>)
 80015ea:	f001 fc49 	bl	8002e80 <HAL_TIM_PWM_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015f4:	f000 f8c2 	bl	800177c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fc:	2208      	movs	r2, #8
 80015fe:	4619      	mov	r1, r3
 8001600:	4813      	ldr	r0, [pc, #76]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001602:	f001 fc3d 	bl	8002e80 <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800160c:	f000 f8b6 	bl	800177c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001624:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001628:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4807      	ldr	r0, [pc, #28]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001634:	f002 f8f4 	bl	8003820 <HAL_TIMEx_ConfigBreakDeadTime>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800163e:	f000 f89d 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001642:	4803      	ldr	r0, [pc, #12]	@ (8001650 <MX_TIM1_Init+0x168>)
 8001644:	f000 f900 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8001648:	bf00      	nop
 800164a:	3758      	adds	r7, #88	@ 0x58
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000a8 	.word	0x200000a8
 8001654:	40010000 	.word	0x40010000

08001658 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_TIM11_Init+0x40>)
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <MX_TIM11_Init+0x44>)
 8001660:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 40-1;
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <MX_TIM11_Init+0x40>)
 8001664:	2227      	movs	r2, #39	@ 0x27
 8001666:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_TIM11_Init+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <MX_TIM11_Init+0x40>)
 8001670:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001674:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_TIM11_Init+0x40>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_TIM11_Init+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_TIM11_Init+0x40>)
 8001684:	f001 fa48 	bl	8002b18 <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800168e:	f000 f875 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200000f0 	.word	0x200000f0
 800169c:	40014800 	.word	0x40014800

080016a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <MX_USART2_UART_Init+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_USART2_UART_Init+0x4c>)
 80016d8:	f002 f8f4 	bl	80038c4 <HAL_UART_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016e2:	f000 f84b 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000138 	.word	0x20000138
 80016f0:	40004400 	.word	0x40004400

080016f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
 8001708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MX_GPIO_Init+0x80>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a18      	ldr	r2, [pc, #96]	@ (8001774 <MX_GPIO_Init+0x80>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_GPIO_Init+0x80>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_GPIO_Init+0x80>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a11      	ldr	r2, [pc, #68]	@ (8001774 <MX_GPIO_Init+0x80>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_GPIO_Init+0x80>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorEnable_GPIO_Port, MotorEnable_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001748:	480b      	ldr	r0, [pc, #44]	@ (8001778 <MX_GPIO_Init+0x84>)
 800174a:	f000 fd73 	bl	8002234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MotorEnable_Pin */
  GPIO_InitStruct.Pin = MotorEnable_Pin;
 800174e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MotorEnable_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4619      	mov	r1, r3
 8001766:	4804      	ldr	r0, [pc, #16]	@ (8001778 <MX_GPIO_Init+0x84>)
 8001768:	f000 fbe0 	bl	8001f2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	40020400 	.word	0x40020400

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <Error_Handler+0x8>

08001788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a0f      	ldr	r2, [pc, #60]	@ (80017d4 <HAL_MspInit+0x4c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a15      	ldr	r2, [pc, #84]	@ (800183c <HAL_TIM_Base_MspInit+0x64>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d10e      	bne.n	8001808 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <HAL_TIM_Base_MspInit+0x68>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001806:	e012      	b.n	800182e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM11)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0d      	ldr	r2, [pc, #52]	@ (8001844 <HAL_TIM_Base_MspInit+0x6c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10d      	bne.n	800182e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_TIM_Base_MspInit+0x68>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181a:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <HAL_TIM_Base_MspInit+0x68>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6453      	str	r3, [r2, #68]	@ 0x44
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <HAL_TIM_Base_MspInit+0x68>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40010000 	.word	0x40010000
 8001840:	40023800 	.word	0x40023800
 8001844:	40014800 	.word	0x40014800

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <HAL_TIM_MspPostInit+0x68>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d11e      	bne.n	80018a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_TIM_MspPostInit+0x6c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_TIM_MspPostInit+0x6c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_TIM_MspPostInit+0x6c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MotorU_Pin|MotorV_Pin|MotorW_Pin;
 8001886:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800188a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001898:	2301      	movs	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_TIM_MspPostInit+0x70>)
 80018a4:	f000 fb42 	bl	8001f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40010000 	.word	0x40010000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	@ 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001950 <HAL_UART_MspInit+0x94>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d133      	bne.n	8001946 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_UART_MspInit+0x98>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <HAL_UART_MspInit+0x98>)
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_UART_MspInit+0x98>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_UART_MspInit+0x98>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001902:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <HAL_UART_MspInit+0x98>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	@ 0x30
 800190a:	4b12      	ldr	r3, [pc, #72]	@ (8001954 <HAL_UART_MspInit+0x98>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001916:	230c      	movs	r3, #12
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001926:	2307      	movs	r3, #7
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4809      	ldr	r0, [pc, #36]	@ (8001958 <HAL_UART_MspInit+0x9c>)
 8001932:	f000 fafb 	bl	8001f2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2026      	movs	r0, #38	@ 0x26
 800193c:	f000 fa2d 	bl	8001d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001940:	2026      	movs	r0, #38	@ 0x26
 8001942:	f000 fa46 	bl	8001dd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	@ 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40004400 	.word	0x40004400
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <NMI_Handler+0x4>

08001964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <MemManage_Handler+0x4>

08001974 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001978:	bf00      	nop
 800197a:	e7fd      	b.n	8001978 <BusFault_Handler+0x4>

0800197c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <UsageFault_Handler+0x4>

08001984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SystickCallback();
 80019b2:	f000 f821 	bl	80019f8 <SystickCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b6:	f000 f8f5 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <USART2_IRQHandler+0x10>)
 80019c6:	f001 fff3 	bl	80039b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000138 	.word	0x20000138

080019d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <SystickCallback>:

#include "timer.h"

int countChangeAngle;

void SystickCallback() {
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
	if(countChangeAngle > 0) countChangeAngle--;
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <SystickCallback+0x20>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	dd04      	ble.n	8001a0e <SystickCallback+0x16>
 8001a04:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <SystickCallback+0x20>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4a03      	ldr	r2, [pc, #12]	@ (8001a18 <SystickCallback+0x20>)
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	20000180 	.word	0x20000180

08001a1c <HAL_UART_RxCpltCallback>:
int _write(int file, char* p, int len){
	HAL_UART_Transmit(myHuart, p, len, 10);
	return len;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferWriteIndex++] = rxChar;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <HAL_UART_RxCpltCallback+0x50>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	b2d1      	uxtb	r1, r2
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a6c <HAL_UART_RxCpltCallback+0x50>)
 8001a2e:	7011      	strb	r1, [r2, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b0f      	ldr	r3, [pc, #60]	@ (8001a70 <HAL_UART_RxCpltCallback+0x54>)
 8001a34:	7819      	ldrb	r1, [r3, #0]
 8001a36:	4b0f      	ldr	r3, [pc, #60]	@ (8001a74 <HAL_UART_RxCpltCallback+0x58>)
 8001a38:	5499      	strb	r1, [r3, r2]
	rxBufferWriteIndex %= rxBufferMax;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_UART_RxCpltCallback+0x50>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a78 <HAL_UART_RxCpltCallback+0x5c>)
 8001a40:	fba2 1203 	umull	r1, r2, r2, r3
 8001a44:	0952      	lsrs	r2, r2, #5
 8001a46:	2164      	movs	r1, #100	@ 0x64
 8001a48:	fb01 f202 	mul.w	r2, r1, r2
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_UART_RxCpltCallback+0x50>)
 8001a52:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(myHuart, (uint8_t *)&rxChar,	1);
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_UART_RxCpltCallback+0x60>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4905      	ldr	r1, [pc, #20]	@ (8001a70 <HAL_UART_RxCpltCallback+0x54>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f001 ff81 	bl	8003964 <HAL_UART_Receive_IT>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200001f0 	.word	0x200001f0
 8001a70:	20000188 	.word	0x20000188
 8001a74:	2000018c 	.word	0x2000018c
 8001a78:	51eb851f 	.word	0x51eb851f
 8001a7c:	20000184 	.word	0x20000184

08001a80 <initUart>:

void initUart(UART_HandleTypeDef *inHuart) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8001a88:	4a06      	ldr	r2, [pc, #24]	@ (8001aa4 <initUart+0x24>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, (uint8_t *)&rxChar, 1);
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <initUart+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4904      	ldr	r1, [pc, #16]	@ (8001aa8 <initUart+0x28>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 ff64 	bl	8003964 <HAL_UART_Receive_IT>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000184 	.word	0x20000184
 8001aa8:	20000188 	.word	0x20000188

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ae4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab0:	f7ff ff90 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ab6:	490d      	ldr	r1, [pc, #52]	@ (8001aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001acc:	4c0a      	ldr	r4, [pc, #40]	@ (8001af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f002 fe75 	bl	80047c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ade:	f7ff fc89 	bl	80013f4 <main>
  bx  lr    
 8001ae2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001af0:	080068f0 	.word	0x080068f0
  ldr r2, =_sbss
 8001af4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001af8:	20000330 	.word	0x20000330

08001afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	@ (8001b40 <HAL_Init+0x40>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	@ (8001b40 <HAL_Init+0x40>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <HAL_Init+0x40>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 f92b 	bl	8001d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	200f      	movs	r0, #15
 8001b30:	f000 f808 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fe28 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_InitTick+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_InitTick+0x58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f943 	bl	8001dee <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00e      	b.n	8001b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d80a      	bhi.n	8001b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b80:	f000 f90b 	bl	8001d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b84:	4a06      	ldr	r2, [pc, #24]	@ (8001ba0 <HAL_InitTick+0x5c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000010 	.word	0x20000010
 8001b9c:	20000018 	.word	0x20000018
 8001ba0:	20000014 	.word	0x20000014

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	@ (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000018 	.word	0x20000018
 8001bc8:	200001f4 	.word	0x200001f4

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	200001f4 	.word	0x200001f4

08001be4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c00:	4013      	ands	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <__NVIC_SetPriorityGrouping+0x44>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	60d3      	str	r3, [r2, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c30:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <__NVIC_GetPriorityGrouping+0x18>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f003 0307 	and.w	r3, r3, #7
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	db0b      	blt.n	8001c72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	f003 021f 	and.w	r2, r3, #31
 8001c60:	4907      	ldr	r1, [pc, #28]	@ (8001c80 <__NVIC_EnableIRQ+0x38>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	2001      	movs	r0, #1
 8001c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	@ (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f1c3 0307 	rsb	r3, r3, #7
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	bf28      	it	cs
 8001cf6:	2304      	movcs	r3, #4
 8001cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d902      	bls.n	8001d08 <NVIC_EncodePriority+0x30>
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	e000      	b.n	8001d0a <NVIC_EncodePriority+0x32>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	401a      	ands	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2a:	43d9      	mvns	r1, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	4313      	orrs	r3, r2
         );
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3724      	adds	r7, #36	@ 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d50:	d301      	bcc.n	8001d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00f      	b.n	8001d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d56:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <SysTick_Config+0x40>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5e:	210f      	movs	r1, #15
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d64:	f7ff ff8e 	bl	8001c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d68:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <SysTick_Config+0x40>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6e:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <SysTick_Config+0x40>)
 8001d70:	2207      	movs	r2, #7
 8001d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff29 	bl	8001be4 <__NVIC_SetPriorityGrouping>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dac:	f7ff ff3e 	bl	8001c2c <__NVIC_GetPriorityGrouping>
 8001db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	6978      	ldr	r0, [r7, #20]
 8001db8:	f7ff ff8e 	bl	8001cd8 <NVIC_EncodePriority>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff ff5d 	bl	8001c84 <__NVIC_SetPriority>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff31 	bl	8001c48 <__NVIC_EnableIRQ>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ffa2 	bl	8001d40 <SysTick_Config>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff feda 	bl	8001bcc <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d008      	beq.n	8001e38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2280      	movs	r2, #128	@ 0x80
 8001e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e052      	b.n	8001ede <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0216 	bic.w	r2, r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d103      	bne.n	8001e68 <HAL_DMA_Abort+0x62>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0208 	bic.w	r2, r2, #8
 8001e76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0201 	bic.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e88:	e013      	b.n	8001eb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e8a:	f7ff fe9f 	bl	8001bcc <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d90c      	bls.n	8001eb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e015      	b.n	8001ede <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e4      	bne.n	8001e8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec4:	223f      	movs	r2, #63	@ 0x3f
 8001ec6:	409a      	lsls	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d004      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2280      	movs	r2, #128	@ 0x80
 8001efe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e00c      	b.n	8001f1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2205      	movs	r2, #5
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	e159      	b.n	80021fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f5c:	693a      	ldr	r2, [r7, #16]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	f040 8148 	bne.w	80021f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d005      	beq.n	8001f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d130      	bne.n	8001fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0201 	and.w	r2, r3, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d017      	beq.n	800201c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d123      	bne.n	8002070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	08da      	lsrs	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3208      	adds	r2, #8
 8002030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	691a      	ldr	r2, [r3, #16]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0203 	and.w	r2, r3, #3
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 80a2 	beq.w	80021f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b57      	ldr	r3, [pc, #348]	@ (8002214 <HAL_GPIO_Init+0x2e8>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	4a56      	ldr	r2, [pc, #344]	@ (8002214 <HAL_GPIO_Init+0x2e8>)
 80020bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c2:	4b54      	ldr	r3, [pc, #336]	@ (8002214 <HAL_GPIO_Init+0x2e8>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ce:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_GPIO_Init+0x2ec>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	220f      	movs	r2, #15
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a49      	ldr	r2, [pc, #292]	@ (800221c <HAL_GPIO_Init+0x2f0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d019      	beq.n	800212e <HAL_GPIO_Init+0x202>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a48      	ldr	r2, [pc, #288]	@ (8002220 <HAL_GPIO_Init+0x2f4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0x1fe>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a47      	ldr	r2, [pc, #284]	@ (8002224 <HAL_GPIO_Init+0x2f8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00d      	beq.n	8002126 <HAL_GPIO_Init+0x1fa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a46      	ldr	r2, [pc, #280]	@ (8002228 <HAL_GPIO_Init+0x2fc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d007      	beq.n	8002122 <HAL_GPIO_Init+0x1f6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a45      	ldr	r2, [pc, #276]	@ (800222c <HAL_GPIO_Init+0x300>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d101      	bne.n	800211e <HAL_GPIO_Init+0x1f2>
 800211a:	2304      	movs	r3, #4
 800211c:	e008      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800211e:	2307      	movs	r3, #7
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x204>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x204>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x204>
 800212e:	2300      	movs	r3, #0
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002140:	4935      	ldr	r1, [pc, #212]	@ (8002218 <HAL_GPIO_Init+0x2ec>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_GPIO_Init+0x304>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002172:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <HAL_GPIO_Init+0x304>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002178:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <HAL_GPIO_Init+0x304>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800219c:	4a24      	ldr	r2, [pc, #144]	@ (8002230 <HAL_GPIO_Init+0x304>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a2:	4b23      	ldr	r3, [pc, #140]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002230 <HAL_GPIO_Init+0x304>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b0f      	cmp	r3, #15
 8002200:	f67f aea2 	bls.w	8001f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40013800 	.word	0x40013800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40013c00 	.word	0x40013c00

08002234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
 8002240:	4613      	mov	r3, r2
 8002242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002244:	787b      	ldrb	r3, [r7, #1]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224a:	887a      	ldrh	r2, [r7, #2]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002250:	e003      	b.n	800225a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002252:	887b      	ldrh	r3, [r7, #2]
 8002254:	041a      	lsls	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	619a      	str	r2, [r3, #24]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e267      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d075      	beq.n	8002372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002286:	4b88      	ldr	r3, [pc, #544]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b04      	cmp	r3, #4
 8002290:	d00c      	beq.n	80022ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002292:	4b85      	ldr	r3, [pc, #532]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800229a:	2b08      	cmp	r3, #8
 800229c:	d112      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229e:	4b82      	ldr	r3, [pc, #520]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022aa:	d10b      	bne.n	80022c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b7e      	ldr	r3, [pc, #504]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d05b      	beq.n	8002370 <HAL_RCC_OscConfig+0x108>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d157      	bne.n	8002370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e242      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022cc:	d106      	bne.n	80022dc <HAL_RCC_OscConfig+0x74>
 80022ce:	4b76      	ldr	r3, [pc, #472]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a75      	ldr	r2, [pc, #468]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x98>
 80022e6:	4b70      	ldr	r3, [pc, #448]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6f      	ldr	r2, [pc, #444]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6d      	ldr	r3, [pc, #436]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a6c      	ldr	r2, [pc, #432]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xb0>
 8002300:	4b69      	ldr	r3, [pc, #420]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a68      	ldr	r2, [pc, #416]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b66      	ldr	r3, [pc, #408]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a65      	ldr	r2, [pc, #404]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fc54 	bl	8001bcc <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fc50 	bl	8001bcc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e207      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800233a:	4b5b      	ldr	r3, [pc, #364]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xc0>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7ff fc40 	bl	8001bcc <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fc3c 	bl	8001bcc <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1f3      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002362:	4b51      	ldr	r3, [pc, #324]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0xe8>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800237e:	4b4a      	ldr	r3, [pc, #296]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00b      	beq.n	80023a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800238a:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002392:	2b08      	cmp	r3, #8
 8002394:	d11c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b44      	ldr	r3, [pc, #272]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023a2:	4b41      	ldr	r3, [pc, #260]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e1c7      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4937      	ldr	r1, [pc, #220]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ce:	e03a      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d8:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_RCC_OscConfig+0x244>)
 80023da:	2201      	movs	r2, #1
 80023dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff fbf5 	bl	8001bcc <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff fbf1 	bl	8001bcc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1a8      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b28      	ldr	r3, [pc, #160]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4925      	ldr	r1, [pc, #148]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e015      	b.n	8002446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241a:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_RCC_OscConfig+0x244>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff fbd4 	bl	8001bcc <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff fbd0 	bl	8001bcc <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e187      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243a:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d036      	beq.n	80024c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <HAL_RCC_OscConfig+0x248>)
 800245c:	2201      	movs	r2, #1
 800245e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7ff fbb4 	bl	8001bcc <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7ff fbb0 	bl	8001bcc <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e167      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_RCC_OscConfig+0x240>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x200>
 8002486:	e01b      	b.n	80024c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_OscConfig+0x248>)
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff fb9d 	bl	8001bcc <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	e00e      	b.n	80024b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002496:	f7ff fb99 	bl	8001bcc <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d907      	bls.n	80024b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e150      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	42470000 	.word	0x42470000
 80024b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b4:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ea      	bne.n	8002496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8097 	beq.w	80025fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024d2:	4b81      	ldr	r3, [pc, #516]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10f      	bne.n	80024fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	4b7d      	ldr	r3, [pc, #500]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e6:	4a7c      	ldr	r2, [pc, #496]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ee:	4b7a      	ldr	r3, [pc, #488]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fa:	2301      	movs	r3, #1
 80024fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	4b77      	ldr	r3, [pc, #476]	@ (80026dc <HAL_RCC_OscConfig+0x474>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002506:	2b00      	cmp	r3, #0
 8002508:	d118      	bne.n	800253c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250a:	4b74      	ldr	r3, [pc, #464]	@ (80026dc <HAL_RCC_OscConfig+0x474>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a73      	ldr	r2, [pc, #460]	@ (80026dc <HAL_RCC_OscConfig+0x474>)
 8002510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002516:	f7ff fb59 	bl	8001bcc <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251e:	f7ff fb55 	bl	8001bcc <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e10c      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	4b6a      	ldr	r3, [pc, #424]	@ (80026dc <HAL_RCC_OscConfig+0x474>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x2ea>
 8002544:	4b64      	ldr	r3, [pc, #400]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002548:	4a63      	ldr	r2, [pc, #396]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x324>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b05      	cmp	r3, #5
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x30c>
 800255a:	4b5f      	ldr	r3, [pc, #380]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 800255c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255e:	4a5e      	ldr	r2, [pc, #376]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	6713      	str	r3, [r2, #112]	@ 0x70
 8002566:	4b5c      	ldr	r3, [pc, #368]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	4a5b      	ldr	r2, [pc, #364]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	@ 0x70
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0x324>
 8002574:	4b58      	ldr	r3, [pc, #352]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	4a57      	ldr	r2, [pc, #348]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002580:	4b55      	ldr	r3, [pc, #340]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	4a54      	ldr	r2, [pc, #336]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002586:	f023 0304 	bic.w	r3, r3, #4
 800258a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d015      	beq.n	80025c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7ff fb1a 	bl	8001bcc <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7ff fb16 	bl	8001bcc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e0cb      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b2:	4b49      	ldr	r3, [pc, #292]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ee      	beq.n	800259c <HAL_RCC_OscConfig+0x334>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7ff fb04 	bl	8001bcc <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c8:	f7ff fb00 	bl	8001bcc <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0b5      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025de:	4b3e      	ldr	r3, [pc, #248]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ee      	bne.n	80025c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025f0:	4b39      	ldr	r3, [pc, #228]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	4a38      	ldr	r2, [pc, #224]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80025f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80a1 	beq.w	8002748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002606:	4b34      	ldr	r3, [pc, #208]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b08      	cmp	r3, #8
 8002610:	d05c      	beq.n	80026cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d141      	bne.n	800269e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261a:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <HAL_RCC_OscConfig+0x478>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff fad4 	bl	8001bcc <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff fad0 	bl	8001bcc <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e087      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b27      	ldr	r3, [pc, #156]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	019b      	lsls	r3, r3, #6
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	3b01      	subs	r3, #1
 8002660:	041b      	lsls	r3, r3, #16
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	061b      	lsls	r3, r3, #24
 800266a:	491b      	ldr	r1, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_RCC_OscConfig+0x478>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7ff faa9 	bl	8001bcc <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7ff faa5 	bl	8001bcc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e05c      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x416>
 800269c:	e054      	b.n	8002748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <HAL_RCC_OscConfig+0x478>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fa92 	bl	8001bcc <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff fa8e 	bl	8001bcc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e045      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_RCC_OscConfig+0x470>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x444>
 80026ca:	e03d      	b.n	8002748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e038      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000
 80026e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002754 <HAL_RCC_OscConfig+0x4ec>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d028      	beq.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d121      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	429a      	cmp	r2, r3
 800270c:	d11a      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002714:	4013      	ands	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800271a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800271c:	4293      	cmp	r3, r2
 800271e:	d111      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d107      	bne.n	8002744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800

08002758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0cc      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800276c:	4b68      	ldr	r3, [pc, #416]	@ (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	429a      	cmp	r2, r3
 8002778:	d90c      	bls.n	8002794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277a:	4b65      	ldr	r3, [pc, #404]	@ (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b63      	ldr	r3, [pc, #396]	@ (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0b8      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ac:	4b59      	ldr	r3, [pc, #356]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4a58      	ldr	r2, [pc, #352]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c4:	4b53      	ldr	r3, [pc, #332]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a52      	ldr	r2, [pc, #328]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b50      	ldr	r3, [pc, #320]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	494d      	ldr	r1, [pc, #308]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d044      	beq.n	8002878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d119      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e07f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d003      	beq.n	8002816 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002812:	2b03      	cmp	r3, #3
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002816:	4b3f      	ldr	r3, [pc, #252]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d109      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e06f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e067      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002836:	4b37      	ldr	r3, [pc, #220]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f023 0203 	bic.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4934      	ldr	r1, [pc, #208]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002848:	f7ff f9c0 	bl	8001bcc <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	e00a      	b.n	8002866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7ff f9bc 	bl	8001bcc <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800285e:	4293      	cmp	r3, r2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e04f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002866:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 020c 	and.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d1eb      	bne.n	8002850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002878:	4b25      	ldr	r3, [pc, #148]	@ (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d20c      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b22      	ldr	r3, [pc, #136]	@ (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b20      	ldr	r3, [pc, #128]	@ (8002910 <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e032      	b.n	8002906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b19      	ldr	r3, [pc, #100]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4916      	ldr	r1, [pc, #88]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ca:	4b12      	ldr	r3, [pc, #72]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	490e      	ldr	r1, [pc, #56]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028de:	f000 f821 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	490a      	ldr	r1, [pc, #40]	@ (8002918 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	4a09      	ldr	r2, [pc, #36]	@ (800291c <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <HAL_RCC_ClockConfig+0x1c8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f920 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40023c00 	.word	0x40023c00
 8002914:	40023800 	.word	0x40023800
 8002918:	080066c0 	.word	0x080066c0
 800291c:	20000010 	.word	0x20000010
 8002920:	20000014 	.word	0x20000014

08002924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002928:	b090      	sub	sp, #64	@ 0x40
 800292a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800293c:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b08      	cmp	r3, #8
 8002946:	d00d      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x40>
 8002948:	2b08      	cmp	r3, #8
 800294a:	f200 80a1 	bhi.w	8002a90 <HAL_RCC_GetSysClockFreq+0x16c>
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x34>
 8002952:	2b04      	cmp	r3, #4
 8002954:	d003      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x3a>
 8002956:	e09b      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002958:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 800295a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800295c:	e09b      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800295e:	4b53      	ldr	r3, [pc, #332]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x188>)
 8002960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002962:	e098      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002964:	4b4f      	ldr	r3, [pc, #316]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800296c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800296e:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	2200      	movs	r2, #0
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	627a      	str	r2, [r7, #36]	@ 0x24
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800298c:	2100      	movs	r1, #0
 800298e:	4b47      	ldr	r3, [pc, #284]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x188>)
 8002990:	fb03 f201 	mul.w	r2, r3, r1
 8002994:	2300      	movs	r3, #0
 8002996:	fb00 f303 	mul.w	r3, r0, r3
 800299a:	4413      	add	r3, r2
 800299c:	4a43      	ldr	r2, [pc, #268]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x188>)
 800299e:	fba0 1202 	umull	r1, r2, r0, r2
 80029a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029a4:	460a      	mov	r2, r1
 80029a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80029a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029aa:	4413      	add	r3, r2
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b0:	2200      	movs	r2, #0
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	61fa      	str	r2, [r7, #28]
 80029b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80029be:	f7fe f8ef 	bl	8000ba0 <__aeabi_uldivmod>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4613      	mov	r3, r2
 80029c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029ca:	e053      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029cc:	4b35      	ldr	r3, [pc, #212]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	2200      	movs	r2, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	617a      	str	r2, [r7, #20]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029de:	f04f 0b00 	mov.w	fp, #0
 80029e2:	4652      	mov	r2, sl
 80029e4:	465b      	mov	r3, fp
 80029e6:	f04f 0000 	mov.w	r0, #0
 80029ea:	f04f 0100 	mov.w	r1, #0
 80029ee:	0159      	lsls	r1, r3, #5
 80029f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f4:	0150      	lsls	r0, r2, #5
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	ebb2 080a 	subs.w	r8, r2, sl
 80029fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a16:	ebb2 0408 	subs.w	r4, r2, r8
 8002a1a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a1e:	f04f 0200 	mov.w	r2, #0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	00eb      	lsls	r3, r5, #3
 8002a28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2c:	00e2      	lsls	r2, r4, #3
 8002a2e:	4614      	mov	r4, r2
 8002a30:	461d      	mov	r5, r3
 8002a32:	eb14 030a 	adds.w	r3, r4, sl
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	eb45 030b 	adc.w	r3, r5, fp
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	028b      	lsls	r3, r1, #10
 8002a4e:	4621      	mov	r1, r4
 8002a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a54:	4621      	mov	r1, r4
 8002a56:	028a      	lsls	r2, r1, #10
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5e:	2200      	movs	r2, #0
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	60fa      	str	r2, [r7, #12]
 8002a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a68:	f7fe f89a 	bl	8000ba0 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3740      	adds	r7, #64	@ 0x40
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	017d7840 	.word	0x017d7840

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	@ (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000010 	.word	0x20000010

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	@ (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	080066d0 	.word	0x080066d0

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffdc 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0b5b      	lsrs	r3, r3, #13
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	@ (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	080066d0 	.word	0x080066d0

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e041      	b.n	8002bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fe4a 	bl	80017d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 fb1c 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d001      	beq.n	8002bd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e03c      	b.n	8002c4a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c58 <HAL_TIM_Base_Start+0xa0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d018      	beq.n	8002c14 <HAL_TIM_Base_Start+0x5c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bea:	d013      	beq.n	8002c14 <HAL_TIM_Base_Start+0x5c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c5c <HAL_TIM_Base_Start+0xa4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d00e      	beq.n	8002c14 <HAL_TIM_Base_Start+0x5c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	@ (8002c60 <HAL_TIM_Base_Start+0xa8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d009      	beq.n	8002c14 <HAL_TIM_Base_Start+0x5c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <HAL_TIM_Base_Start+0xac>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d004      	beq.n	8002c14 <HAL_TIM_Base_Start+0x5c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <HAL_TIM_Base_Start+0xb0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d111      	bne.n	8002c38 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d010      	beq.n	8002c48 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c36:	e007      	b.n	8002c48 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40000400 	.word	0x40000400
 8002c60:	40000800 	.word	0x40000800
 8002c64:	40000c00 	.word	0x40000c00
 8002c68:	40014000 	.word	0x40014000

08002c6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e041      	b.n	8002d02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f839 	bl	8002d0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 fa72 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d109      	bne.n	8002d44 <HAL_TIM_PWM_Start+0x24>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e022      	b.n	8002d8a <HAL_TIM_PWM_Start+0x6a>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d109      	bne.n	8002d5e <HAL_TIM_PWM_Start+0x3e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	bf14      	ite	ne
 8002d56:	2301      	movne	r3, #1
 8002d58:	2300      	moveq	r3, #0
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	e015      	b.n	8002d8a <HAL_TIM_PWM_Start+0x6a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d109      	bne.n	8002d78 <HAL_TIM_PWM_Start+0x58>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	bf14      	ite	ne
 8002d70:	2301      	movne	r3, #1
 8002d72:	2300      	moveq	r3, #0
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e008      	b.n	8002d8a <HAL_TIM_PWM_Start+0x6a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e068      	b.n	8002e64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_TIM_PWM_Start+0x82>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002da0:	e013      	b.n	8002dca <HAL_TIM_PWM_Start+0xaa>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d104      	bne.n	8002db2 <HAL_TIM_PWM_Start+0x92>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002db0:	e00b      	b.n	8002dca <HAL_TIM_PWM_Start+0xaa>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d104      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0xa2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dc0:	e003      	b.n	8002dca <HAL_TIM_PWM_Start+0xaa>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fc90 	bl	80036f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <HAL_TIM_PWM_Start+0x14c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d107      	bne.n	8002df2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e6c <HAL_TIM_PWM_Start+0x14c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x10e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e04:	d013      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x10e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a19      	ldr	r2, [pc, #100]	@ (8002e70 <HAL_TIM_PWM_Start+0x150>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x10e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a17      	ldr	r2, [pc, #92]	@ (8002e74 <HAL_TIM_PWM_Start+0x154>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x10e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a16      	ldr	r2, [pc, #88]	@ (8002e78 <HAL_TIM_PWM_Start+0x158>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_TIM_PWM_Start+0x10e>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_TIM_PWM_Start+0x15c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d111      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b06      	cmp	r3, #6
 8002e3e:	d010      	beq.n	8002e62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e50:	e007      	b.n	8002e62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40014000 	.word	0x40014000

08002e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0ae      	b.n	8002ffc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	f200 809f 	bhi.w	8002fec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002ee9 	.word	0x08002ee9
 8002eb8:	08002fed 	.word	0x08002fed
 8002ebc:	08002fed 	.word	0x08002fed
 8002ec0:	08002fed 	.word	0x08002fed
 8002ec4:	08002f29 	.word	0x08002f29
 8002ec8:	08002fed 	.word	0x08002fed
 8002ecc:	08002fed 	.word	0x08002fed
 8002ed0:	08002fed 	.word	0x08002fed
 8002ed4:	08002f6b 	.word	0x08002f6b
 8002ed8:	08002fed 	.word	0x08002fed
 8002edc:	08002fed 	.word	0x08002fed
 8002ee0:	08002fed 	.word	0x08002fed
 8002ee4:	08002fab 	.word	0x08002fab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f9dc 	bl	80032ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0208 	orr.w	r2, r2, #8
 8002f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0204 	bic.w	r2, r2, #4
 8002f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6999      	ldr	r1, [r3, #24]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	619a      	str	r2, [r3, #24]
      break;
 8002f26:	e064      	b.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68b9      	ldr	r1, [r7, #8]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa22 	bl	8003378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6999      	ldr	r1, [r3, #24]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	021a      	lsls	r2, r3, #8
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	619a      	str	r2, [r3, #24]
      break;
 8002f68:	e043      	b.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fa6d 	bl	8003450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0208 	orr.w	r2, r2, #8
 8002f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0204 	bic.w	r2, r2, #4
 8002f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69d9      	ldr	r1, [r3, #28]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	61da      	str	r2, [r3, #28]
      break;
 8002fa8:	e023      	b.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fab7 	bl	8003524 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	69d9      	ldr	r1, [r3, #28]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	021a      	lsls	r2, r3, #8
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	61da      	str	r2, [r3, #28]
      break;
 8002fea:	e002      	b.n	8002ff2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	75fb      	strb	r3, [r7, #23]
      break;
 8002ff0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_TIM_ConfigClockSource+0x1c>
 800301c:	2302      	movs	r3, #2
 800301e:	e0b4      	b.n	800318a <HAL_TIM_ConfigClockSource+0x186>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800303e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003058:	d03e      	beq.n	80030d8 <HAL_TIM_ConfigClockSource+0xd4>
 800305a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800305e:	f200 8087 	bhi.w	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003066:	f000 8086 	beq.w	8003176 <HAL_TIM_ConfigClockSource+0x172>
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306e:	d87f      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b70      	cmp	r3, #112	@ 0x70
 8003072:	d01a      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xa6>
 8003074:	2b70      	cmp	r3, #112	@ 0x70
 8003076:	d87b      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b60      	cmp	r3, #96	@ 0x60
 800307a:	d050      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x11a>
 800307c:	2b60      	cmp	r3, #96	@ 0x60
 800307e:	d877      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b50      	cmp	r3, #80	@ 0x50
 8003082:	d03c      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xfa>
 8003084:	2b50      	cmp	r3, #80	@ 0x50
 8003086:	d873      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003088:	2b40      	cmp	r3, #64	@ 0x40
 800308a:	d058      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x13a>
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d86f      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003090:	2b30      	cmp	r3, #48	@ 0x30
 8003092:	d064      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 8003094:	2b30      	cmp	r3, #48	@ 0x30
 8003096:	d86b      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 8003098:	2b20      	cmp	r3, #32
 800309a:	d060      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 800309c:	2b20      	cmp	r3, #32
 800309e:	d867      	bhi.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d05c      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 80030a4:	2b10      	cmp	r3, #16
 80030a6:	d05a      	beq.n	800315e <HAL_TIM_ConfigClockSource+0x15a>
 80030a8:	e062      	b.n	8003170 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ba:	f000 fafd 	bl	80036b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	609a      	str	r2, [r3, #8]
      break;
 80030d6:	e04f      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030e8:	f000 fae6 	bl	80036b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030fa:	609a      	str	r2, [r3, #8]
      break;
 80030fc:	e03c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	461a      	mov	r2, r3
 800310c:	f000 fa5a 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2150      	movs	r1, #80	@ 0x50
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fab3 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800311c:	e02c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800312a:	461a      	mov	r2, r3
 800312c:	f000 fa79 	bl	8003622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2160      	movs	r1, #96	@ 0x60
 8003136:	4618      	mov	r0, r3
 8003138:	f000 faa3 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800313c:	e01c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	461a      	mov	r2, r3
 800314c:	f000 fa3a 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2140      	movs	r1, #64	@ 0x40
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fa93 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800315c:	e00c      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f000 fa8a 	bl	8003682 <TIM_ITRx_SetConfig>
      break;
 800316e:	e003      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      break;
 8003174:	e000      	b.n	8003178 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003188:	7bfb      	ldrb	r3, [r7, #15]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003290 <TIM_Base_SetConfig+0xfc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00f      	beq.n	80031cc <TIM_Base_SetConfig+0x38>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b2:	d00b      	beq.n	80031cc <TIM_Base_SetConfig+0x38>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a37      	ldr	r2, [pc, #220]	@ (8003294 <TIM_Base_SetConfig+0x100>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <TIM_Base_SetConfig+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a36      	ldr	r2, [pc, #216]	@ (8003298 <TIM_Base_SetConfig+0x104>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0x38>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a35      	ldr	r2, [pc, #212]	@ (800329c <TIM_Base_SetConfig+0x108>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003290 <TIM_Base_SetConfig+0xfc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01b      	beq.n	800321e <TIM_Base_SetConfig+0x8a>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ec:	d017      	beq.n	800321e <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a28      	ldr	r2, [pc, #160]	@ (8003294 <TIM_Base_SetConfig+0x100>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a27      	ldr	r2, [pc, #156]	@ (8003298 <TIM_Base_SetConfig+0x104>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00f      	beq.n	800321e <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a26      	ldr	r2, [pc, #152]	@ (800329c <TIM_Base_SetConfig+0x108>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00b      	beq.n	800321e <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a25      	ldr	r2, [pc, #148]	@ (80032a0 <TIM_Base_SetConfig+0x10c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a24      	ldr	r2, [pc, #144]	@ (80032a4 <TIM_Base_SetConfig+0x110>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d003      	beq.n	800321e <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a23      	ldr	r2, [pc, #140]	@ (80032a8 <TIM_Base_SetConfig+0x114>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d108      	bne.n	8003230 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0e      	ldr	r2, [pc, #56]	@ (8003290 <TIM_Base_SetConfig+0xfc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d103      	bne.n	8003264 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f023 0201 	bic.w	r2, r3, #1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	611a      	str	r2, [r3, #16]
  }
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800

080032ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 0201 	bic.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 0302 	bic.w	r3, r3, #2
 80032f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a1c      	ldr	r2, [pc, #112]	@ (8003374 <TIM_OC1_SetConfig+0xc8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d10c      	bne.n	8003322 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 0308 	bic.w	r3, r3, #8
 800330e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 0304 	bic.w	r3, r3, #4
 8003320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a13      	ldr	r2, [pc, #76]	@ (8003374 <TIM_OC1_SetConfig+0xc8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d111      	bne.n	800334e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010000 	.word	0x40010000

08003378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f023 0210 	bic.w	r2, r3, #16
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0320 	bic.w	r3, r3, #32
 80033c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a1e      	ldr	r2, [pc, #120]	@ (800344c <TIM_OC2_SetConfig+0xd4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10d      	bne.n	80033f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a15      	ldr	r2, [pc, #84]	@ (800344c <TIM_OC2_SetConfig+0xd4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d113      	bne.n	8003424 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800340a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40010000 	.word	0x40010000

08003450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800347e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0303 	bic.w	r3, r3, #3
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <TIM_OC3_SetConfig+0xd0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10d      	bne.n	80034ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a14      	ldr	r2, [pc, #80]	@ (8003520 <TIM_OC3_SetConfig+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40010000 	.word	0x40010000

08003524 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003552:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800356e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	031b      	lsls	r3, r3, #12
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a10      	ldr	r2, [pc, #64]	@ (80035c0 <TIM_OC4_SetConfig+0x9c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d109      	bne.n	8003598 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800358a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	019b      	lsls	r3, r3, #6
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000

080035c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0201 	bic.w	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 030a 	bic.w	r3, r3, #10
 8003600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003622:	b480      	push	{r7}
 8003624:	b087      	sub	sp, #28
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f023 0210 	bic.w	r2, r3, #16
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800364c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003682:	b480      	push	{r7}
 8003684:	b085      	sub	sp, #20
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	f043 0307 	orr.w	r3, r3, #7
 80036a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	021a      	lsls	r2, r3, #8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	431a      	orrs	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	bf00      	nop
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2201      	movs	r2, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1a      	ldr	r2, [r3, #32]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	43db      	mvns	r3, r3
 800371a:	401a      	ands	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003758:	2302      	movs	r3, #2
 800375a:	e050      	b.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1c      	ldr	r2, [pc, #112]	@ (800380c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d018      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d013      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a18      	ldr	r2, [pc, #96]	@ (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a16      	ldr	r2, [pc, #88]	@ (8003814 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a15      	ldr	r2, [pc, #84]	@ (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a13      	ldr	r2, [pc, #76]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10c      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40014000 	.word	0x40014000

08003820 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003838:	2302      	movs	r3, #2
 800383a:	e03d      	b.n	80038b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e042      	b.n	800395c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd ffe6 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2224      	movs	r2, #36	@ 0x24
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fcdb 	bl	80042c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800391c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800392c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800393c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b20      	cmp	r3, #32
 800397c:	d112      	bne.n	80039a4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <HAL_UART_Receive_IT+0x26>
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e00b      	b.n	80039a6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	461a      	mov	r2, r3
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 faba 	bl	8003f14 <UART_Start_Receive_IT>
 80039a0:	4603      	mov	r3, r0
 80039a2:	e000      	b.n	80039a6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b0ba      	sub	sp, #232	@ 0xe8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10f      	bne.n	8003a16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fa:	f003 0320 	and.w	r3, r3, #32
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_UART_IRQHandler+0x66>
 8003a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb99 	bl	8004146 <UART_Receive_IT>
      return;
 8003a14:	e25b      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 80de 	beq.w	8003bdc <HAL_UART_IRQHandler+0x22c>
 8003a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80d1 	beq.w	8003bdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00b      	beq.n	8003a5e <HAL_UART_IRQHandler+0xae>
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	f043 0201 	orr.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_UART_IRQHandler+0xd2>
 8003a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d005      	beq.n	8003a82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f043 0202 	orr.w	r2, r3, #2
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00b      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xf6>
 8003a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9e:	f043 0204 	orr.w	r2, r3, #4
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d011      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x126>
 8003ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d005      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ace:	f043 0208 	orr.w	r2, r3, #8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 81f2 	beq.w	8003ec4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d008      	beq.n	8003afe <HAL_UART_IRQHandler+0x14e>
 8003aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fb24 	bl	8004146 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <HAL_UART_IRQHandler+0x17a>
 8003b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d04f      	beq.n	8003bca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fa2c 	bl	8003f88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b3a:	2b40      	cmp	r3, #64	@ 0x40
 8003b3c:	d141      	bne.n	8003bc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3314      	adds	r3, #20
 8003b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b4c:	e853 3f00 	ldrex	r3, [r3]
 8003b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1d9      	bne.n	8003b3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b96:	4a7e      	ldr	r2, [pc, #504]	@ (8003d90 <HAL_UART_IRQHandler+0x3e0>)
 8003b98:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe f9a1 	bl	8001ee6 <HAL_DMA_Abort_IT>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	e00e      	b.n	8003bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f994 	bl	8003ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	e00a      	b.n	8003bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f990 	bl	8003ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	e006      	b.n	8003bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f98c 	bl	8003ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bd6:	e175      	b.n	8003ec4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd8:	bf00      	nop
    return;
 8003bda:	e173      	b.n	8003ec4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	f040 814f 	bne.w	8003e84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bea:	f003 0310 	and.w	r3, r3, #16
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8148 	beq.w	8003e84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8141 	beq.w	8003e84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c02:	2300      	movs	r3, #0
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	60bb      	str	r3, [r7, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c22:	2b40      	cmp	r3, #64	@ 0x40
 8003c24:	f040 80b6 	bne.w	8003d94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8145 	beq.w	8003ec8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c46:	429a      	cmp	r2, r3
 8003c48:	f080 813e 	bcs.w	8003ec8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5e:	f000 8088 	beq.w	8003d72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1d9      	bne.n	8003c62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003cbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3314      	adds	r3, #20
 8003cce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cd2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cda:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ce4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e1      	bne.n	8003cae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3314      	adds	r3, #20
 8003cf0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3314      	adds	r3, #20
 8003d0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003d0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e3      	bne.n	8003cea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d42:	f023 0310 	bic.w	r3, r3, #16
 8003d46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e3      	bne.n	8003d30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fe f84a 	bl	8001e06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	4619      	mov	r1, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f8b7 	bl	8003efc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d8e:	e09b      	b.n	8003ec8 <HAL_UART_IRQHandler+0x518>
 8003d90:	0800404f 	.word	0x0800404f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 808e 	beq.w	8003ecc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8089 	beq.w	8003ecc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003dde:	647a      	str	r2, [r7, #68]	@ 0x44
 8003de0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003de4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e3      	bne.n	8003dba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	e853 3f00 	ldrex	r3, [r3]
 8003e00:	623b      	str	r3, [r7, #32]
   return(result);
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e16:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e3      	bne.n	8003df2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0310 	bic.w	r3, r3, #16
 8003e4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e5c:	61fa      	str	r2, [r7, #28]
 8003e5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	69b9      	ldr	r1, [r7, #24]
 8003e62:	69fa      	ldr	r2, [r7, #28]
 8003e64:	e841 2300 	strex	r3, r2, [r1]
 8003e68:	617b      	str	r3, [r7, #20]
   return(result);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e3      	bne.n	8003e38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f83d 	bl	8003efc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e82:	e023      	b.n	8003ecc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d009      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x4f4>
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f8ea 	bl	8004076 <UART_Transmit_IT>
    return;
 8003ea2:	e014      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00e      	beq.n	8003ece <HAL_UART_IRQHandler+0x51e>
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f92a 	bl	8004116 <UART_EndTransmit_IT>
    return;
 8003ec2:	e004      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
    return;
 8003ec4:	bf00      	nop
 8003ec6:	e002      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
      return;
 8003ec8:	bf00      	nop
 8003eca:	e000      	b.n	8003ece <HAL_UART_IRQHandler+0x51e>
      return;
 8003ecc:	bf00      	nop
  }
}
 8003ece:	37e8      	adds	r7, #232	@ 0xe8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	88fa      	ldrh	r2, [r7, #6]
 8003f2c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	88fa      	ldrh	r2, [r7, #6]
 8003f32:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2222      	movs	r2, #34	@ 0x22
 8003f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f58:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0220 	orr.w	r2, r2, #32
 8003f78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b095      	sub	sp, #84	@ 0x54
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fb0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3314      	adds	r3, #20
 8003fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3314      	adds	r3, #20
 8003fe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e5      	bne.n	8003fc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d119      	bne.n	8004034 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	330c      	adds	r3, #12
 8004006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0310 	bic.w	r3, r3, #16
 8004016:	647b      	str	r3, [r7, #68]	@ 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	330c      	adds	r3, #12
 800401e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004020:	61ba      	str	r2, [r7, #24]
 8004022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004042:	bf00      	nop
 8004044:	3754      	adds	r7, #84	@ 0x54
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f7ff ff3d 	bl	8003ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b21      	cmp	r3, #33	@ 0x21
 8004088:	d13e      	bne.n	8004108 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004092:	d114      	bne.n	80040be <UART_Transmit_IT+0x48>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d110      	bne.n	80040be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]
 80040bc:	e008      	b.n	80040d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6211      	str	r1, [r2, #32]
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	4619      	mov	r1, r3
 80040de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004102:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800412c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fecc 	bl	8003ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b08c      	sub	sp, #48	@ 0x30
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b22      	cmp	r3, #34	@ 0x22
 8004158:	f040 80ae 	bne.w	80042b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004164:	d117      	bne.n	8004196 <UART_Receive_IT+0x50>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d113      	bne.n	8004196 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004184:	b29a      	uxth	r2, r3
 8004186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004188:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418e:	1c9a      	adds	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	629a      	str	r2, [r3, #40]	@ 0x28
 8004194:	e026      	b.n	80041e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800419c:	2300      	movs	r3, #0
 800419e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a8:	d007      	beq.n	80041ba <UART_Receive_IT+0x74>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10a      	bne.n	80041c8 <UART_Receive_IT+0x82>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e008      	b.n	80041da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4619      	mov	r1, r3
 80041f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d15d      	bne.n	80042b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0220 	bic.w	r2, r2, #32
 8004206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	2b01      	cmp	r3, #1
 800423c:	d135      	bne.n	80042aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	330c      	adds	r3, #12
 800424a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	e853 3f00 	ldrex	r3, [r3]
 8004252:	613b      	str	r3, [r7, #16]
   return(result);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f023 0310 	bic.w	r3, r3, #16
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	330c      	adds	r3, #12
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	623a      	str	r2, [r7, #32]
 8004266:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004268:	69f9      	ldr	r1, [r7, #28]
 800426a:	6a3a      	ldr	r2, [r7, #32]
 800426c:	e841 2300 	strex	r3, r2, [r1]
 8004270:	61bb      	str	r3, [r7, #24]
   return(result);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1e5      	bne.n	8004244 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b10      	cmp	r3, #16
 8004284:	d10a      	bne.n	800429c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff fe2a 	bl	8003efc <HAL_UARTEx_RxEventCallback>
 80042a8:	e002      	b.n	80042b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fbb6 	bl	8001a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e002      	b.n	80042ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3730      	adds	r7, #48	@ 0x30
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c8:	b0c0      	sub	sp, #256	@ 0x100
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	68d9      	ldr	r1, [r3, #12]
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	ea40 0301 	orr.w	r3, r0, r1
 80042ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800431c:	f021 010c 	bic.w	r1, r1, #12
 8004320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800432a:	430b      	orrs	r3, r1
 800432c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433e:	6999      	ldr	r1, [r3, #24]
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	ea40 0301 	orr.w	r3, r0, r1
 800434a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b8f      	ldr	r3, [pc, #572]	@ (8004590 <UART_SetConfig+0x2cc>)
 8004354:	429a      	cmp	r2, r3
 8004356:	d005      	beq.n	8004364 <UART_SetConfig+0xa0>
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b8d      	ldr	r3, [pc, #564]	@ (8004594 <UART_SetConfig+0x2d0>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d104      	bne.n	800436e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004364:	f7fe fbc4 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8004368:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800436c:	e003      	b.n	8004376 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800436e:	f7fe fbab 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8004372:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004380:	f040 810c 	bne.w	800459c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800438e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004392:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004396:	4622      	mov	r2, r4
 8004398:	462b      	mov	r3, r5
 800439a:	1891      	adds	r1, r2, r2
 800439c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800439e:	415b      	adcs	r3, r3
 80043a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043a6:	4621      	mov	r1, r4
 80043a8:	eb12 0801 	adds.w	r8, r2, r1
 80043ac:	4629      	mov	r1, r5
 80043ae:	eb43 0901 	adc.w	r9, r3, r1
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c6:	4690      	mov	r8, r2
 80043c8:	4699      	mov	r9, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	eb18 0303 	adds.w	r3, r8, r3
 80043d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043d4:	462b      	mov	r3, r5
 80043d6:	eb49 0303 	adc.w	r3, r9, r3
 80043da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043f2:	460b      	mov	r3, r1
 80043f4:	18db      	adds	r3, r3, r3
 80043f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80043f8:	4613      	mov	r3, r2
 80043fa:	eb42 0303 	adc.w	r3, r2, r3
 80043fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004400:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004404:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004408:	f7fc fbca 	bl	8000ba0 <__aeabi_uldivmod>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4b61      	ldr	r3, [pc, #388]	@ (8004598 <UART_SetConfig+0x2d4>)
 8004412:	fba3 2302 	umull	r2, r3, r3, r2
 8004416:	095b      	lsrs	r3, r3, #5
 8004418:	011c      	lsls	r4, r3, #4
 800441a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004424:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004428:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	1891      	adds	r1, r2, r2
 8004432:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004434:	415b      	adcs	r3, r3
 8004436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004438:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800443c:	4641      	mov	r1, r8
 800443e:	eb12 0a01 	adds.w	sl, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb43 0b01 	adc.w	fp, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004454:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004458:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800445c:	4692      	mov	sl, r2
 800445e:	469b      	mov	fp, r3
 8004460:	4643      	mov	r3, r8
 8004462:	eb1a 0303 	adds.w	r3, sl, r3
 8004466:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800446a:	464b      	mov	r3, r9
 800446c:	eb4b 0303 	adc.w	r3, fp, r3
 8004470:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004480:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004484:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004488:	460b      	mov	r3, r1
 800448a:	18db      	adds	r3, r3, r3
 800448c:	643b      	str	r3, [r7, #64]	@ 0x40
 800448e:	4613      	mov	r3, r2
 8004490:	eb42 0303 	adc.w	r3, r2, r3
 8004494:	647b      	str	r3, [r7, #68]	@ 0x44
 8004496:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800449a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800449e:	f7fc fb7f 	bl	8000ba0 <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <UART_SetConfig+0x2d4>)
 80044aa:	fba3 2301 	umull	r2, r3, r3, r1
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2264      	movs	r2, #100	@ 0x64
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	1acb      	subs	r3, r1, r3
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044be:	4b36      	ldr	r3, [pc, #216]	@ (8004598 <UART_SetConfig+0x2d4>)
 80044c0:	fba3 2302 	umull	r2, r3, r3, r2
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044cc:	441c      	add	r4, r3
 80044ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044e0:	4642      	mov	r2, r8
 80044e2:	464b      	mov	r3, r9
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044e8:	415b      	adcs	r3, r3
 80044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044f0:	4641      	mov	r1, r8
 80044f2:	1851      	adds	r1, r2, r1
 80044f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80044f6:	4649      	mov	r1, r9
 80044f8:	414b      	adcs	r3, r1
 80044fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004508:	4659      	mov	r1, fp
 800450a:	00cb      	lsls	r3, r1, #3
 800450c:	4651      	mov	r1, sl
 800450e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004512:	4651      	mov	r1, sl
 8004514:	00ca      	lsls	r2, r1, #3
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	4603      	mov	r3, r0
 800451c:	4642      	mov	r2, r8
 800451e:	189b      	adds	r3, r3, r2
 8004520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004524:	464b      	mov	r3, r9
 8004526:	460a      	mov	r2, r1
 8004528:	eb42 0303 	adc.w	r3, r2, r3
 800452c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800453c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004544:	460b      	mov	r3, r1
 8004546:	18db      	adds	r3, r3, r3
 8004548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800454a:	4613      	mov	r3, r2
 800454c:	eb42 0303 	adc.w	r3, r2, r3
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004556:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800455a:	f7fc fb21 	bl	8000ba0 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <UART_SetConfig+0x2d4>)
 8004564:	fba3 1302 	umull	r1, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	2164      	movs	r1, #100	@ 0x64
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	3332      	adds	r3, #50	@ 0x32
 8004576:	4a08      	ldr	r2, [pc, #32]	@ (8004598 <UART_SetConfig+0x2d4>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	f003 0207 	and.w	r2, r3, #7
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4422      	add	r2, r4
 800458a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800458c:	e106      	b.n	800479c <UART_SetConfig+0x4d8>
 800458e:	bf00      	nop
 8004590:	40011000 	.word	0x40011000
 8004594:	40011400 	.word	0x40011400
 8004598:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800459c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045ae:	4642      	mov	r2, r8
 80045b0:	464b      	mov	r3, r9
 80045b2:	1891      	adds	r1, r2, r2
 80045b4:	6239      	str	r1, [r7, #32]
 80045b6:	415b      	adcs	r3, r3
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045be:	4641      	mov	r1, r8
 80045c0:	1854      	adds	r4, r2, r1
 80045c2:	4649      	mov	r1, r9
 80045c4:	eb43 0501 	adc.w	r5, r3, r1
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	00eb      	lsls	r3, r5, #3
 80045d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d6:	00e2      	lsls	r2, r4, #3
 80045d8:	4614      	mov	r4, r2
 80045da:	461d      	mov	r5, r3
 80045dc:	4643      	mov	r3, r8
 80045de:	18e3      	adds	r3, r4, r3
 80045e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045e4:	464b      	mov	r3, r9
 80045e6:	eb45 0303 	adc.w	r3, r5, r3
 80045ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800460a:	4629      	mov	r1, r5
 800460c:	008b      	lsls	r3, r1, #2
 800460e:	4621      	mov	r1, r4
 8004610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004614:	4621      	mov	r1, r4
 8004616:	008a      	lsls	r2, r1, #2
 8004618:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800461c:	f7fc fac0 	bl	8000ba0 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4b60      	ldr	r3, [pc, #384]	@ (80047a8 <UART_SetConfig+0x4e4>)
 8004626:	fba3 2302 	umull	r2, r3, r3, r2
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	011c      	lsls	r4, r3, #4
 800462e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004632:	2200      	movs	r2, #0
 8004634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004638:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800463c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	1891      	adds	r1, r2, r2
 8004646:	61b9      	str	r1, [r7, #24]
 8004648:	415b      	adcs	r3, r3
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004650:	4641      	mov	r1, r8
 8004652:	1851      	adds	r1, r2, r1
 8004654:	6139      	str	r1, [r7, #16]
 8004656:	4649      	mov	r1, r9
 8004658:	414b      	adcs	r3, r1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004668:	4659      	mov	r1, fp
 800466a:	00cb      	lsls	r3, r1, #3
 800466c:	4651      	mov	r1, sl
 800466e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004672:	4651      	mov	r1, sl
 8004674:	00ca      	lsls	r2, r1, #3
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	4603      	mov	r3, r0
 800467c:	4642      	mov	r2, r8
 800467e:	189b      	adds	r3, r3, r2
 8004680:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004684:	464b      	mov	r3, r9
 8004686:	460a      	mov	r2, r1
 8004688:	eb42 0303 	adc.w	r3, r2, r3
 800468c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	67bb      	str	r3, [r7, #120]	@ 0x78
 800469a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046a8:	4649      	mov	r1, r9
 80046aa:	008b      	lsls	r3, r1, #2
 80046ac:	4641      	mov	r1, r8
 80046ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046b2:	4641      	mov	r1, r8
 80046b4:	008a      	lsls	r2, r1, #2
 80046b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046ba:	f7fc fa71 	bl	8000ba0 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	4b38      	ldr	r3, [pc, #224]	@ (80047a8 <UART_SetConfig+0x4e4>)
 80046c6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2264      	movs	r2, #100	@ 0x64
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	1acb      	subs	r3, r1, r3
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	3332      	adds	r3, #50	@ 0x32
 80046d8:	4a33      	ldr	r2, [pc, #204]	@ (80047a8 <UART_SetConfig+0x4e4>)
 80046da:	fba2 2303 	umull	r2, r3, r2, r3
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046e4:	441c      	add	r4, r3
 80046e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ea:	2200      	movs	r2, #0
 80046ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80046ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80046f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80046f4:	4642      	mov	r2, r8
 80046f6:	464b      	mov	r3, r9
 80046f8:	1891      	adds	r1, r2, r2
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	415b      	adcs	r3, r3
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004704:	4641      	mov	r1, r8
 8004706:	1851      	adds	r1, r2, r1
 8004708:	6039      	str	r1, [r7, #0]
 800470a:	4649      	mov	r1, r9
 800470c:	414b      	adcs	r3, r1
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800471c:	4659      	mov	r1, fp
 800471e:	00cb      	lsls	r3, r1, #3
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004726:	4651      	mov	r1, sl
 8004728:	00ca      	lsls	r2, r1, #3
 800472a:	4610      	mov	r0, r2
 800472c:	4619      	mov	r1, r3
 800472e:	4603      	mov	r3, r0
 8004730:	4642      	mov	r2, r8
 8004732:	189b      	adds	r3, r3, r2
 8004734:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004736:	464b      	mov	r3, r9
 8004738:	460a      	mov	r2, r1
 800473a:	eb42 0303 	adc.w	r3, r2, r3
 800473e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	663b      	str	r3, [r7, #96]	@ 0x60
 800474a:	667a      	str	r2, [r7, #100]	@ 0x64
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004758:	4649      	mov	r1, r9
 800475a:	008b      	lsls	r3, r1, #2
 800475c:	4641      	mov	r1, r8
 800475e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004762:	4641      	mov	r1, r8
 8004764:	008a      	lsls	r2, r1, #2
 8004766:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800476a:	f7fc fa19 	bl	8000ba0 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <UART_SetConfig+0x4e4>)
 8004774:	fba3 1302 	umull	r1, r3, r3, r2
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	2164      	movs	r1, #100	@ 0x64
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	3332      	adds	r3, #50	@ 0x32
 8004786:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <UART_SetConfig+0x4e4>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	f003 020f 	and.w	r2, r3, #15
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4422      	add	r2, r4
 800479a:	609a      	str	r2, [r3, #8]
}
 800479c:	bf00      	nop
 800479e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047a2:	46bd      	mov	sp, r7
 80047a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047a8:	51eb851f 	.word	0x51eb851f

080047ac <memset>:
 80047ac:	4402      	add	r2, r0
 80047ae:	4603      	mov	r3, r0
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d100      	bne.n	80047b6 <memset+0xa>
 80047b4:	4770      	bx	lr
 80047b6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ba:	e7f9      	b.n	80047b0 <memset+0x4>

080047bc <__errno>:
 80047bc:	4b01      	ldr	r3, [pc, #4]	@ (80047c4 <__errno+0x8>)
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	2000001c 	.word	0x2000001c

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004800 <__libc_init_array+0x38>)
 80047cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004804 <__libc_init_array+0x3c>)
 80047ce:	1b64      	subs	r4, r4, r5
 80047d0:	10a4      	asrs	r4, r4, #2
 80047d2:	2600      	movs	r6, #0
 80047d4:	42a6      	cmp	r6, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004808 <__libc_init_array+0x40>)
 80047da:	4c0c      	ldr	r4, [pc, #48]	@ (800480c <__libc_init_array+0x44>)
 80047dc:	f001 ff64 	bl	80066a8 <_init>
 80047e0:	1b64      	subs	r4, r4, r5
 80047e2:	10a4      	asrs	r4, r4, #2
 80047e4:	2600      	movs	r6, #0
 80047e6:	42a6      	cmp	r6, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f0:	4798      	blx	r3
 80047f2:	3601      	adds	r6, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047fa:	4798      	blx	r3
 80047fc:	3601      	adds	r6, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	080068e8 	.word	0x080068e8
 8004804:	080068e8 	.word	0x080068e8
 8004808:	080068e8 	.word	0x080068e8
 800480c:	080068ec 	.word	0x080068ec

08004810 <pow>:
 8004810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004812:	ed2d 8b02 	vpush	{d8}
 8004816:	eeb0 8a40 	vmov.f32	s16, s0
 800481a:	eef0 8a60 	vmov.f32	s17, s1
 800481e:	ec55 4b11 	vmov	r4, r5, d1
 8004822:	f000 f90d 	bl	8004a40 <__ieee754_pow>
 8004826:	4622      	mov	r2, r4
 8004828:	462b      	mov	r3, r5
 800482a:	4620      	mov	r0, r4
 800482c:	4629      	mov	r1, r5
 800482e:	ec57 6b10 	vmov	r6, r7, d0
 8004832:	f7fc f927 	bl	8000a84 <__aeabi_dcmpun>
 8004836:	2800      	cmp	r0, #0
 8004838:	d13b      	bne.n	80048b2 <pow+0xa2>
 800483a:	ec51 0b18 	vmov	r0, r1, d8
 800483e:	2200      	movs	r2, #0
 8004840:	2300      	movs	r3, #0
 8004842:	f7fc f8ed 	bl	8000a20 <__aeabi_dcmpeq>
 8004846:	b1b8      	cbz	r0, 8004878 <pow+0x68>
 8004848:	2200      	movs	r2, #0
 800484a:	2300      	movs	r3, #0
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	f7fc f8e6 	bl	8000a20 <__aeabi_dcmpeq>
 8004854:	2800      	cmp	r0, #0
 8004856:	d146      	bne.n	80048e6 <pow+0xd6>
 8004858:	ec45 4b10 	vmov	d0, r4, r5
 800485c:	f000 f848 	bl	80048f0 <finite>
 8004860:	b338      	cbz	r0, 80048b2 <pow+0xa2>
 8004862:	2200      	movs	r2, #0
 8004864:	2300      	movs	r3, #0
 8004866:	4620      	mov	r0, r4
 8004868:	4629      	mov	r1, r5
 800486a:	f7fc f8e3 	bl	8000a34 <__aeabi_dcmplt>
 800486e:	b300      	cbz	r0, 80048b2 <pow+0xa2>
 8004870:	f7ff ffa4 	bl	80047bc <__errno>
 8004874:	2322      	movs	r3, #34	@ 0x22
 8004876:	e01b      	b.n	80048b0 <pow+0xa0>
 8004878:	ec47 6b10 	vmov	d0, r6, r7
 800487c:	f000 f838 	bl	80048f0 <finite>
 8004880:	b9e0      	cbnz	r0, 80048bc <pow+0xac>
 8004882:	eeb0 0a48 	vmov.f32	s0, s16
 8004886:	eef0 0a68 	vmov.f32	s1, s17
 800488a:	f000 f831 	bl	80048f0 <finite>
 800488e:	b1a8      	cbz	r0, 80048bc <pow+0xac>
 8004890:	ec45 4b10 	vmov	d0, r4, r5
 8004894:	f000 f82c 	bl	80048f0 <finite>
 8004898:	b180      	cbz	r0, 80048bc <pow+0xac>
 800489a:	4632      	mov	r2, r6
 800489c:	463b      	mov	r3, r7
 800489e:	4630      	mov	r0, r6
 80048a0:	4639      	mov	r1, r7
 80048a2:	f7fc f8ef 	bl	8000a84 <__aeabi_dcmpun>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d0e2      	beq.n	8004870 <pow+0x60>
 80048aa:	f7ff ff87 	bl	80047bc <__errno>
 80048ae:	2321      	movs	r3, #33	@ 0x21
 80048b0:	6003      	str	r3, [r0, #0]
 80048b2:	ecbd 8b02 	vpop	{d8}
 80048b6:	ec47 6b10 	vmov	d0, r6, r7
 80048ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048bc:	2200      	movs	r2, #0
 80048be:	2300      	movs	r3, #0
 80048c0:	4630      	mov	r0, r6
 80048c2:	4639      	mov	r1, r7
 80048c4:	f7fc f8ac 	bl	8000a20 <__aeabi_dcmpeq>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d0f2      	beq.n	80048b2 <pow+0xa2>
 80048cc:	eeb0 0a48 	vmov.f32	s0, s16
 80048d0:	eef0 0a68 	vmov.f32	s1, s17
 80048d4:	f000 f80c 	bl	80048f0 <finite>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d0ea      	beq.n	80048b2 <pow+0xa2>
 80048dc:	ec45 4b10 	vmov	d0, r4, r5
 80048e0:	f000 f806 	bl	80048f0 <finite>
 80048e4:	e7c3      	b.n	800486e <pow+0x5e>
 80048e6:	4f01      	ldr	r7, [pc, #4]	@ (80048ec <pow+0xdc>)
 80048e8:	2600      	movs	r6, #0
 80048ea:	e7e2      	b.n	80048b2 <pow+0xa2>
 80048ec:	3ff00000 	.word	0x3ff00000

080048f0 <finite>:
 80048f0:	b082      	sub	sp, #8
 80048f2:	ed8d 0b00 	vstr	d0, [sp]
 80048f6:	9801      	ldr	r0, [sp, #4]
 80048f8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80048fc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004900:	0fc0      	lsrs	r0, r0, #31
 8004902:	b002      	add	sp, #8
 8004904:	4770      	bx	lr
	...

08004908 <sin>:
 8004908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800490a:	ec53 2b10 	vmov	r2, r3, d0
 800490e:	4826      	ldr	r0, [pc, #152]	@ (80049a8 <sin+0xa0>)
 8004910:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004914:	4281      	cmp	r1, r0
 8004916:	d807      	bhi.n	8004928 <sin+0x20>
 8004918:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80049a0 <sin+0x98>
 800491c:	2000      	movs	r0, #0
 800491e:	b005      	add	sp, #20
 8004920:	f85d eb04 	ldr.w	lr, [sp], #4
 8004924:	f001 bc28 	b.w	8006178 <__kernel_sin>
 8004928:	4820      	ldr	r0, [pc, #128]	@ (80049ac <sin+0xa4>)
 800492a:	4281      	cmp	r1, r0
 800492c:	d908      	bls.n	8004940 <sin+0x38>
 800492e:	4610      	mov	r0, r2
 8004930:	4619      	mov	r1, r3
 8004932:	f7fb fc55 	bl	80001e0 <__aeabi_dsub>
 8004936:	ec41 0b10 	vmov	d0, r0, r1
 800493a:	b005      	add	sp, #20
 800493c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004940:	4668      	mov	r0, sp
 8004942:	f000 fdc1 	bl	80054c8 <__ieee754_rem_pio2>
 8004946:	f000 0003 	and.w	r0, r0, #3
 800494a:	2801      	cmp	r0, #1
 800494c:	d00c      	beq.n	8004968 <sin+0x60>
 800494e:	2802      	cmp	r0, #2
 8004950:	d011      	beq.n	8004976 <sin+0x6e>
 8004952:	b9e8      	cbnz	r0, 8004990 <sin+0x88>
 8004954:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004958:	ed9d 0b00 	vldr	d0, [sp]
 800495c:	2001      	movs	r0, #1
 800495e:	f001 fc0b 	bl	8006178 <__kernel_sin>
 8004962:	ec51 0b10 	vmov	r0, r1, d0
 8004966:	e7e6      	b.n	8004936 <sin+0x2e>
 8004968:	ed9d 1b02 	vldr	d1, [sp, #8]
 800496c:	ed9d 0b00 	vldr	d0, [sp]
 8004970:	f001 fb3a 	bl	8005fe8 <__kernel_cos>
 8004974:	e7f5      	b.n	8004962 <sin+0x5a>
 8004976:	ed9d 1b02 	vldr	d1, [sp, #8]
 800497a:	ed9d 0b00 	vldr	d0, [sp]
 800497e:	2001      	movs	r0, #1
 8004980:	f001 fbfa 	bl	8006178 <__kernel_sin>
 8004984:	ec53 2b10 	vmov	r2, r3, d0
 8004988:	4610      	mov	r0, r2
 800498a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800498e:	e7d2      	b.n	8004936 <sin+0x2e>
 8004990:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004994:	ed9d 0b00 	vldr	d0, [sp]
 8004998:	f001 fb26 	bl	8005fe8 <__kernel_cos>
 800499c:	e7f2      	b.n	8004984 <sin+0x7c>
 800499e:	bf00      	nop
	...
 80049a8:	3fe921fb 	.word	0x3fe921fb
 80049ac:	7fefffff 	.word	0x7fefffff

080049b0 <round>:
 80049b0:	ec51 0b10 	vmov	r0, r1, d0
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80049ba:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 80049be:	2a13      	cmp	r2, #19
 80049c0:	460b      	mov	r3, r1
 80049c2:	4605      	mov	r5, r0
 80049c4:	dc1b      	bgt.n	80049fe <round+0x4e>
 80049c6:	2a00      	cmp	r2, #0
 80049c8:	da0b      	bge.n	80049e2 <round+0x32>
 80049ca:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80049ce:	3201      	adds	r2, #1
 80049d0:	bf04      	itt	eq
 80049d2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80049d6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80049da:	2200      	movs	r2, #0
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	e015      	b.n	8004a0e <round+0x5e>
 80049e2:	4c15      	ldr	r4, [pc, #84]	@ (8004a38 <round+0x88>)
 80049e4:	4114      	asrs	r4, r2
 80049e6:	ea04 0601 	and.w	r6, r4, r1
 80049ea:	4306      	orrs	r6, r0
 80049ec:	d00f      	beq.n	8004a0e <round+0x5e>
 80049ee:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80049f2:	fa41 f202 	asr.w	r2, r1, r2
 80049f6:	4413      	add	r3, r2
 80049f8:	ea23 0304 	bic.w	r3, r3, r4
 80049fc:	e7ed      	b.n	80049da <round+0x2a>
 80049fe:	2a33      	cmp	r2, #51	@ 0x33
 8004a00:	dd08      	ble.n	8004a14 <round+0x64>
 8004a02:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004a06:	d102      	bne.n	8004a0e <round+0x5e>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	f7fb fbeb 	bl	80001e4 <__adddf3>
 8004a0e:	ec41 0b10 	vmov	d0, r0, r1
 8004a12:	bd70      	pop	{r4, r5, r6, pc}
 8004a14:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8004a18:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004a1c:	40f4      	lsrs	r4, r6
 8004a1e:	4204      	tst	r4, r0
 8004a20:	d0f5      	beq.n	8004a0e <round+0x5e>
 8004a22:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8004a26:	2201      	movs	r2, #1
 8004a28:	408a      	lsls	r2, r1
 8004a2a:	1952      	adds	r2, r2, r5
 8004a2c:	bf28      	it	cs
 8004a2e:	3301      	addcs	r3, #1
 8004a30:	ea22 0204 	bic.w	r2, r2, r4
 8004a34:	e7d2      	b.n	80049dc <round+0x2c>
 8004a36:	bf00      	nop
 8004a38:	000fffff 	.word	0x000fffff
 8004a3c:	00000000 	.word	0x00000000

08004a40 <__ieee754_pow>:
 8004a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a44:	b091      	sub	sp, #68	@ 0x44
 8004a46:	ed8d 1b00 	vstr	d1, [sp]
 8004a4a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8004a4e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8004a52:	ea5a 0001 	orrs.w	r0, sl, r1
 8004a56:	ec57 6b10 	vmov	r6, r7, d0
 8004a5a:	d113      	bne.n	8004a84 <__ieee754_pow+0x44>
 8004a5c:	19b3      	adds	r3, r6, r6
 8004a5e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8004a62:	4152      	adcs	r2, r2
 8004a64:	4298      	cmp	r0, r3
 8004a66:	4b98      	ldr	r3, [pc, #608]	@ (8004cc8 <__ieee754_pow+0x288>)
 8004a68:	4193      	sbcs	r3, r2
 8004a6a:	f080 84ea 	bcs.w	8005442 <__ieee754_pow+0xa02>
 8004a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a72:	4630      	mov	r0, r6
 8004a74:	4639      	mov	r1, r7
 8004a76:	f7fb fbb5 	bl	80001e4 <__adddf3>
 8004a7a:	ec41 0b10 	vmov	d0, r0, r1
 8004a7e:	b011      	add	sp, #68	@ 0x44
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	4a91      	ldr	r2, [pc, #580]	@ (8004ccc <__ieee754_pow+0x28c>)
 8004a86:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004a8a:	4590      	cmp	r8, r2
 8004a8c:	463d      	mov	r5, r7
 8004a8e:	4633      	mov	r3, r6
 8004a90:	d806      	bhi.n	8004aa0 <__ieee754_pow+0x60>
 8004a92:	d101      	bne.n	8004a98 <__ieee754_pow+0x58>
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	d1ea      	bne.n	8004a6e <__ieee754_pow+0x2e>
 8004a98:	4592      	cmp	sl, r2
 8004a9a:	d801      	bhi.n	8004aa0 <__ieee754_pow+0x60>
 8004a9c:	d10e      	bne.n	8004abc <__ieee754_pow+0x7c>
 8004a9e:	b169      	cbz	r1, 8004abc <__ieee754_pow+0x7c>
 8004aa0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004aa4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004aa8:	431d      	orrs	r5, r3
 8004aaa:	d1e0      	bne.n	8004a6e <__ieee754_pow+0x2e>
 8004aac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004ab0:	18db      	adds	r3, r3, r3
 8004ab2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004ab6:	4152      	adcs	r2, r2
 8004ab8:	429d      	cmp	r5, r3
 8004aba:	e7d4      	b.n	8004a66 <__ieee754_pow+0x26>
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	46c3      	mov	fp, r8
 8004ac0:	da3a      	bge.n	8004b38 <__ieee754_pow+0xf8>
 8004ac2:	4a83      	ldr	r2, [pc, #524]	@ (8004cd0 <__ieee754_pow+0x290>)
 8004ac4:	4592      	cmp	sl, r2
 8004ac6:	d84d      	bhi.n	8004b64 <__ieee754_pow+0x124>
 8004ac8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004acc:	4592      	cmp	sl, r2
 8004ace:	f240 84c7 	bls.w	8005460 <__ieee754_pow+0xa20>
 8004ad2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8004ad6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004ada:	2a14      	cmp	r2, #20
 8004adc:	dd0f      	ble.n	8004afe <__ieee754_pow+0xbe>
 8004ade:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004ae2:	fa21 f402 	lsr.w	r4, r1, r2
 8004ae6:	fa04 f202 	lsl.w	r2, r4, r2
 8004aea:	428a      	cmp	r2, r1
 8004aec:	f040 84b8 	bne.w	8005460 <__ieee754_pow+0xa20>
 8004af0:	f004 0401 	and.w	r4, r4, #1
 8004af4:	f1c4 0402 	rsb	r4, r4, #2
 8004af8:	2900      	cmp	r1, #0
 8004afa:	d158      	bne.n	8004bae <__ieee754_pow+0x16e>
 8004afc:	e00e      	b.n	8004b1c <__ieee754_pow+0xdc>
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d154      	bne.n	8004bac <__ieee754_pow+0x16c>
 8004b02:	f1c2 0214 	rsb	r2, r2, #20
 8004b06:	fa4a f402 	asr.w	r4, sl, r2
 8004b0a:	fa04 f202 	lsl.w	r2, r4, r2
 8004b0e:	4552      	cmp	r2, sl
 8004b10:	f040 84a3 	bne.w	800545a <__ieee754_pow+0xa1a>
 8004b14:	f004 0401 	and.w	r4, r4, #1
 8004b18:	f1c4 0402 	rsb	r4, r4, #2
 8004b1c:	4a6d      	ldr	r2, [pc, #436]	@ (8004cd4 <__ieee754_pow+0x294>)
 8004b1e:	4592      	cmp	sl, r2
 8004b20:	d12e      	bne.n	8004b80 <__ieee754_pow+0x140>
 8004b22:	f1b9 0f00 	cmp.w	r9, #0
 8004b26:	f280 8494 	bge.w	8005452 <__ieee754_pow+0xa12>
 8004b2a:	496a      	ldr	r1, [pc, #424]	@ (8004cd4 <__ieee754_pow+0x294>)
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	463b      	mov	r3, r7
 8004b30:	2000      	movs	r0, #0
 8004b32:	f7fb fe37 	bl	80007a4 <__aeabi_ddiv>
 8004b36:	e7a0      	b.n	8004a7a <__ieee754_pow+0x3a>
 8004b38:	2400      	movs	r4, #0
 8004b3a:	bbc1      	cbnz	r1, 8004bae <__ieee754_pow+0x16e>
 8004b3c:	4a63      	ldr	r2, [pc, #396]	@ (8004ccc <__ieee754_pow+0x28c>)
 8004b3e:	4592      	cmp	sl, r2
 8004b40:	d1ec      	bne.n	8004b1c <__ieee754_pow+0xdc>
 8004b42:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8004b46:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	f000 8479 	beq.w	8005442 <__ieee754_pow+0xa02>
 8004b50:	4b61      	ldr	r3, [pc, #388]	@ (8004cd8 <__ieee754_pow+0x298>)
 8004b52:	4598      	cmp	r8, r3
 8004b54:	d908      	bls.n	8004b68 <__ieee754_pow+0x128>
 8004b56:	f1b9 0f00 	cmp.w	r9, #0
 8004b5a:	f2c0 8476 	blt.w	800544a <__ieee754_pow+0xa0a>
 8004b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b62:	e78a      	b.n	8004a7a <__ieee754_pow+0x3a>
 8004b64:	2402      	movs	r4, #2
 8004b66:	e7e8      	b.n	8004b3a <__ieee754_pow+0xfa>
 8004b68:	f1b9 0f00 	cmp.w	r9, #0
 8004b6c:	f04f 0000 	mov.w	r0, #0
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	da81      	bge.n	8004a7a <__ieee754_pow+0x3a>
 8004b76:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004b7a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004b7e:	e77c      	b.n	8004a7a <__ieee754_pow+0x3a>
 8004b80:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8004b84:	d106      	bne.n	8004b94 <__ieee754_pow+0x154>
 8004b86:	4632      	mov	r2, r6
 8004b88:	463b      	mov	r3, r7
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	4639      	mov	r1, r7
 8004b8e:	f7fb fcdf 	bl	8000550 <__aeabi_dmul>
 8004b92:	e772      	b.n	8004a7a <__ieee754_pow+0x3a>
 8004b94:	4a51      	ldr	r2, [pc, #324]	@ (8004cdc <__ieee754_pow+0x29c>)
 8004b96:	4591      	cmp	r9, r2
 8004b98:	d109      	bne.n	8004bae <__ieee754_pow+0x16e>
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	db07      	blt.n	8004bae <__ieee754_pow+0x16e>
 8004b9e:	ec47 6b10 	vmov	d0, r6, r7
 8004ba2:	b011      	add	sp, #68	@ 0x44
 8004ba4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba8:	f001 bc28 	b.w	80063fc <__ieee754_sqrt>
 8004bac:	2400      	movs	r4, #0
 8004bae:	ec47 6b10 	vmov	d0, r6, r7
 8004bb2:	9302      	str	r3, [sp, #8]
 8004bb4:	f001 fb9a 	bl	80062ec <fabs>
 8004bb8:	9b02      	ldr	r3, [sp, #8]
 8004bba:	ec51 0b10 	vmov	r0, r1, d0
 8004bbe:	bb53      	cbnz	r3, 8004c16 <__ieee754_pow+0x1d6>
 8004bc0:	4b44      	ldr	r3, [pc, #272]	@ (8004cd4 <__ieee754_pow+0x294>)
 8004bc2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d002      	beq.n	8004bd0 <__ieee754_pow+0x190>
 8004bca:	f1b8 0f00 	cmp.w	r8, #0
 8004bce:	d122      	bne.n	8004c16 <__ieee754_pow+0x1d6>
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	da05      	bge.n	8004be2 <__ieee754_pow+0x1a2>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	2000      	movs	r0, #0
 8004bdc:	493d      	ldr	r1, [pc, #244]	@ (8004cd4 <__ieee754_pow+0x294>)
 8004bde:	f7fb fde1 	bl	80007a4 <__aeabi_ddiv>
 8004be2:	2d00      	cmp	r5, #0
 8004be4:	f6bf af49 	bge.w	8004a7a <__ieee754_pow+0x3a>
 8004be8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8004bec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8004bf0:	ea58 0804 	orrs.w	r8, r8, r4
 8004bf4:	d108      	bne.n	8004c08 <__ieee754_pow+0x1c8>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	f7fb faef 	bl	80001e0 <__aeabi_dsub>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	e794      	b.n	8004b32 <__ieee754_pow+0xf2>
 8004c08:	2c01      	cmp	r4, #1
 8004c0a:	f47f af36 	bne.w	8004a7a <__ieee754_pow+0x3a>
 8004c0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004c12:	4619      	mov	r1, r3
 8004c14:	e731      	b.n	8004a7a <__ieee754_pow+0x3a>
 8004c16:	0feb      	lsrs	r3, r5, #31
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	ea53 0204 	orrs.w	r2, r3, r4
 8004c1e:	d102      	bne.n	8004c26 <__ieee754_pow+0x1e6>
 8004c20:	4632      	mov	r2, r6
 8004c22:	463b      	mov	r3, r7
 8004c24:	e7e9      	b.n	8004bfa <__ieee754_pow+0x1ba>
 8004c26:	3c01      	subs	r4, #1
 8004c28:	431c      	orrs	r4, r3
 8004c2a:	d016      	beq.n	8004c5a <__ieee754_pow+0x21a>
 8004c2c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8004cb8 <__ieee754_pow+0x278>
 8004c30:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8004c34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c38:	f240 8112 	bls.w	8004e60 <__ieee754_pow+0x420>
 8004c3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ce0 <__ieee754_pow+0x2a0>)
 8004c3e:	459a      	cmp	sl, r3
 8004c40:	4b25      	ldr	r3, [pc, #148]	@ (8004cd8 <__ieee754_pow+0x298>)
 8004c42:	d916      	bls.n	8004c72 <__ieee754_pow+0x232>
 8004c44:	4598      	cmp	r8, r3
 8004c46:	d80b      	bhi.n	8004c60 <__ieee754_pow+0x220>
 8004c48:	f1b9 0f00 	cmp.w	r9, #0
 8004c4c:	da0b      	bge.n	8004c66 <__ieee754_pow+0x226>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	b011      	add	sp, #68	@ 0x44
 8004c52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c56:	f000 be67 	b.w	8005928 <__math_oflow>
 8004c5a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8004cc0 <__ieee754_pow+0x280>
 8004c5e:	e7e7      	b.n	8004c30 <__ieee754_pow+0x1f0>
 8004c60:	f1b9 0f00 	cmp.w	r9, #0
 8004c64:	dcf3      	bgt.n	8004c4e <__ieee754_pow+0x20e>
 8004c66:	2000      	movs	r0, #0
 8004c68:	b011      	add	sp, #68	@ 0x44
 8004c6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c6e:	f000 be53 	b.w	8005918 <__math_uflow>
 8004c72:	4598      	cmp	r8, r3
 8004c74:	d20c      	bcs.n	8004c90 <__ieee754_pow+0x250>
 8004c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f7fb fed9 	bl	8000a34 <__aeabi_dcmplt>
 8004c82:	3800      	subs	r0, #0
 8004c84:	bf18      	it	ne
 8004c86:	2001      	movne	r0, #1
 8004c88:	f1b9 0f00 	cmp.w	r9, #0
 8004c8c:	daec      	bge.n	8004c68 <__ieee754_pow+0x228>
 8004c8e:	e7df      	b.n	8004c50 <__ieee754_pow+0x210>
 8004c90:	4b10      	ldr	r3, [pc, #64]	@ (8004cd4 <__ieee754_pow+0x294>)
 8004c92:	4598      	cmp	r8, r3
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	d924      	bls.n	8004ce4 <__ieee754_pow+0x2a4>
 8004c9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f7fb fec8 	bl	8000a34 <__aeabi_dcmplt>
 8004ca4:	3800      	subs	r0, #0
 8004ca6:	bf18      	it	ne
 8004ca8:	2001      	movne	r0, #1
 8004caa:	f1b9 0f00 	cmp.w	r9, #0
 8004cae:	dccf      	bgt.n	8004c50 <__ieee754_pow+0x210>
 8004cb0:	e7da      	b.n	8004c68 <__ieee754_pow+0x228>
 8004cb2:	bf00      	nop
 8004cb4:	f3af 8000 	nop.w
 8004cb8:	00000000 	.word	0x00000000
 8004cbc:	3ff00000 	.word	0x3ff00000
 8004cc0:	00000000 	.word	0x00000000
 8004cc4:	bff00000 	.word	0xbff00000
 8004cc8:	fff00000 	.word	0xfff00000
 8004ccc:	7ff00000 	.word	0x7ff00000
 8004cd0:	433fffff 	.word	0x433fffff
 8004cd4:	3ff00000 	.word	0x3ff00000
 8004cd8:	3fefffff 	.word	0x3fefffff
 8004cdc:	3fe00000 	.word	0x3fe00000
 8004ce0:	43f00000 	.word	0x43f00000
 8004ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8004e50 <__ieee754_pow+0x410>)
 8004ce6:	f7fb fa7b 	bl	80001e0 <__aeabi_dsub>
 8004cea:	a351      	add	r3, pc, #324	@ (adr r3, 8004e30 <__ieee754_pow+0x3f0>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	4604      	mov	r4, r0
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	f7fb fc2c 	bl	8000550 <__aeabi_dmul>
 8004cf8:	a34f      	add	r3, pc, #316	@ (adr r3, 8004e38 <__ieee754_pow+0x3f8>)
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	4606      	mov	r6, r0
 8004d00:	460f      	mov	r7, r1
 8004d02:	4620      	mov	r0, r4
 8004d04:	4629      	mov	r1, r5
 8004d06:	f7fb fc23 	bl	8000550 <__aeabi_dmul>
 8004d0a:	4b52      	ldr	r3, [pc, #328]	@ (8004e54 <__ieee754_pow+0x414>)
 8004d0c:	4682      	mov	sl, r0
 8004d0e:	468b      	mov	fp, r1
 8004d10:	2200      	movs	r2, #0
 8004d12:	4620      	mov	r0, r4
 8004d14:	4629      	mov	r1, r5
 8004d16:	f7fb fc1b 	bl	8000550 <__aeabi_dmul>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	a148      	add	r1, pc, #288	@ (adr r1, 8004e40 <__ieee754_pow+0x400>)
 8004d20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d24:	f7fb fa5c 	bl	80001e0 <__aeabi_dsub>
 8004d28:	4622      	mov	r2, r4
 8004d2a:	462b      	mov	r3, r5
 8004d2c:	f7fb fc10 	bl	8000550 <__aeabi_dmul>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	2000      	movs	r0, #0
 8004d36:	4948      	ldr	r1, [pc, #288]	@ (8004e58 <__ieee754_pow+0x418>)
 8004d38:	f7fb fa52 	bl	80001e0 <__aeabi_dsub>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	4680      	mov	r8, r0
 8004d40:	4689      	mov	r9, r1
 8004d42:	462b      	mov	r3, r5
 8004d44:	4620      	mov	r0, r4
 8004d46:	4629      	mov	r1, r5
 8004d48:	f7fb fc02 	bl	8000550 <__aeabi_dmul>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4640      	mov	r0, r8
 8004d52:	4649      	mov	r1, r9
 8004d54:	f7fb fbfc 	bl	8000550 <__aeabi_dmul>
 8004d58:	a33b      	add	r3, pc, #236	@ (adr r3, 8004e48 <__ieee754_pow+0x408>)
 8004d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5e:	f7fb fbf7 	bl	8000550 <__aeabi_dmul>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4650      	mov	r0, sl
 8004d68:	4659      	mov	r1, fp
 8004d6a:	f7fb fa39 	bl	80001e0 <__aeabi_dsub>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4680      	mov	r8, r0
 8004d74:	4689      	mov	r9, r1
 8004d76:	4630      	mov	r0, r6
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f7fb fa33 	bl	80001e4 <__adddf3>
 8004d7e:	2400      	movs	r4, #0
 8004d80:	4632      	mov	r2, r6
 8004d82:	463b      	mov	r3, r7
 8004d84:	4620      	mov	r0, r4
 8004d86:	460d      	mov	r5, r1
 8004d88:	f7fb fa2a 	bl	80001e0 <__aeabi_dsub>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4640      	mov	r0, r8
 8004d92:	4649      	mov	r1, r9
 8004d94:	f7fb fa24 	bl	80001e0 <__aeabi_dsub>
 8004d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004da0:	2300      	movs	r3, #0
 8004da2:	9304      	str	r3, [sp, #16]
 8004da4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004da8:	4606      	mov	r6, r0
 8004daa:	460f      	mov	r7, r1
 8004dac:	4652      	mov	r2, sl
 8004dae:	465b      	mov	r3, fp
 8004db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004db4:	f7fb fa14 	bl	80001e0 <__aeabi_dsub>
 8004db8:	4622      	mov	r2, r4
 8004dba:	462b      	mov	r3, r5
 8004dbc:	f7fb fbc8 	bl	8000550 <__aeabi_dmul>
 8004dc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dc4:	4680      	mov	r8, r0
 8004dc6:	4689      	mov	r9, r1
 8004dc8:	4630      	mov	r0, r6
 8004dca:	4639      	mov	r1, r7
 8004dcc:	f7fb fbc0 	bl	8000550 <__aeabi_dmul>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	f7fb fa04 	bl	80001e4 <__adddf3>
 8004ddc:	4652      	mov	r2, sl
 8004dde:	465b      	mov	r3, fp
 8004de0:	4606      	mov	r6, r0
 8004de2:	460f      	mov	r7, r1
 8004de4:	4620      	mov	r0, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	f7fb fbb2 	bl	8000550 <__aeabi_dmul>
 8004dec:	460b      	mov	r3, r1
 8004dee:	4602      	mov	r2, r0
 8004df0:	4680      	mov	r8, r0
 8004df2:	4689      	mov	r9, r1
 8004df4:	4630      	mov	r0, r6
 8004df6:	4639      	mov	r1, r7
 8004df8:	f7fb f9f4 	bl	80001e4 <__adddf3>
 8004dfc:	4b17      	ldr	r3, [pc, #92]	@ (8004e5c <__ieee754_pow+0x41c>)
 8004dfe:	4299      	cmp	r1, r3
 8004e00:	4604      	mov	r4, r0
 8004e02:	460d      	mov	r5, r1
 8004e04:	468a      	mov	sl, r1
 8004e06:	468b      	mov	fp, r1
 8004e08:	f340 82ef 	ble.w	80053ea <__ieee754_pow+0x9aa>
 8004e0c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004e10:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004e14:	4303      	orrs	r3, r0
 8004e16:	f000 81e8 	beq.w	80051ea <__ieee754_pow+0x7aa>
 8004e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2300      	movs	r3, #0
 8004e22:	f7fb fe07 	bl	8000a34 <__aeabi_dcmplt>
 8004e26:	3800      	subs	r0, #0
 8004e28:	bf18      	it	ne
 8004e2a:	2001      	movne	r0, #1
 8004e2c:	e710      	b.n	8004c50 <__ieee754_pow+0x210>
 8004e2e:	bf00      	nop
 8004e30:	60000000 	.word	0x60000000
 8004e34:	3ff71547 	.word	0x3ff71547
 8004e38:	f85ddf44 	.word	0xf85ddf44
 8004e3c:	3e54ae0b 	.word	0x3e54ae0b
 8004e40:	55555555 	.word	0x55555555
 8004e44:	3fd55555 	.word	0x3fd55555
 8004e48:	652b82fe 	.word	0x652b82fe
 8004e4c:	3ff71547 	.word	0x3ff71547
 8004e50:	3ff00000 	.word	0x3ff00000
 8004e54:	3fd00000 	.word	0x3fd00000
 8004e58:	3fe00000 	.word	0x3fe00000
 8004e5c:	408fffff 	.word	0x408fffff
 8004e60:	4bd5      	ldr	r3, [pc, #852]	@ (80051b8 <__ieee754_pow+0x778>)
 8004e62:	402b      	ands	r3, r5
 8004e64:	2200      	movs	r2, #0
 8004e66:	b92b      	cbnz	r3, 8004e74 <__ieee754_pow+0x434>
 8004e68:	4bd4      	ldr	r3, [pc, #848]	@ (80051bc <__ieee754_pow+0x77c>)
 8004e6a:	f7fb fb71 	bl	8000550 <__aeabi_dmul>
 8004e6e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8004e72:	468b      	mov	fp, r1
 8004e74:	ea4f 532b 	mov.w	r3, fp, asr #20
 8004e78:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004e7c:	4413      	add	r3, r2
 8004e7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e80:	4bcf      	ldr	r3, [pc, #828]	@ (80051c0 <__ieee754_pow+0x780>)
 8004e82:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8004e86:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8004e8a:	459b      	cmp	fp, r3
 8004e8c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004e90:	dd08      	ble.n	8004ea4 <__ieee754_pow+0x464>
 8004e92:	4bcc      	ldr	r3, [pc, #816]	@ (80051c4 <__ieee754_pow+0x784>)
 8004e94:	459b      	cmp	fp, r3
 8004e96:	f340 81a5 	ble.w	80051e4 <__ieee754_pow+0x7a4>
 8004e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ea0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004ea4:	f04f 0a00 	mov.w	sl, #0
 8004ea8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004eac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eae:	4bc6      	ldr	r3, [pc, #792]	@ (80051c8 <__ieee754_pow+0x788>)
 8004eb0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004eb4:	ed93 7b00 	vldr	d7, [r3]
 8004eb8:	4629      	mov	r1, r5
 8004eba:	ec53 2b17 	vmov	r2, r3, d7
 8004ebe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004ec2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ec6:	f7fb f98b 	bl	80001e0 <__aeabi_dsub>
 8004eca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed6:	f7fb f985 	bl	80001e4 <__adddf3>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	2000      	movs	r0, #0
 8004ee0:	49ba      	ldr	r1, [pc, #744]	@ (80051cc <__ieee754_pow+0x78c>)
 8004ee2:	f7fb fc5f 	bl	80007a4 <__aeabi_ddiv>
 8004ee6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4630      	mov	r0, r6
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	f7fb fb2d 	bl	8000550 <__aeabi_dmul>
 8004ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004efa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8004efe:	106d      	asrs	r5, r5, #1
 8004f00:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004f04:	f04f 0b00 	mov.w	fp, #0
 8004f08:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004f0c:	4661      	mov	r1, ip
 8004f0e:	2200      	movs	r2, #0
 8004f10:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004f14:	4658      	mov	r0, fp
 8004f16:	46e1      	mov	r9, ip
 8004f18:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	461d      	mov	r5, r3
 8004f20:	f7fb fb16 	bl	8000550 <__aeabi_dmul>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4630      	mov	r0, r6
 8004f2a:	4639      	mov	r1, r7
 8004f2c:	f7fb f958 	bl	80001e0 <__aeabi_dsub>
 8004f30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f34:	4606      	mov	r6, r0
 8004f36:	460f      	mov	r7, r1
 8004f38:	4620      	mov	r0, r4
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f7fb f950 	bl	80001e0 <__aeabi_dsub>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f48:	f7fb f94a 	bl	80001e0 <__aeabi_dsub>
 8004f4c:	465a      	mov	r2, fp
 8004f4e:	464b      	mov	r3, r9
 8004f50:	f7fb fafe 	bl	8000550 <__aeabi_dmul>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4630      	mov	r0, r6
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f7fb f940 	bl	80001e0 <__aeabi_dsub>
 8004f60:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f64:	f7fb faf4 	bl	8000550 <__aeabi_dmul>
 8004f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f7fb faec 	bl	8000550 <__aeabi_dmul>
 8004f78:	a37d      	add	r3, pc, #500	@ (adr r3, 8005170 <__ieee754_pow+0x730>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	f7fb fae5 	bl	8000550 <__aeabi_dmul>
 8004f86:	a37c      	add	r3, pc, #496	@ (adr r3, 8005178 <__ieee754_pow+0x738>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb f92a 	bl	80001e4 <__adddf3>
 8004f90:	4622      	mov	r2, r4
 8004f92:	462b      	mov	r3, r5
 8004f94:	f7fb fadc 	bl	8000550 <__aeabi_dmul>
 8004f98:	a379      	add	r3, pc, #484	@ (adr r3, 8005180 <__ieee754_pow+0x740>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb f921 	bl	80001e4 <__adddf3>
 8004fa2:	4622      	mov	r2, r4
 8004fa4:	462b      	mov	r3, r5
 8004fa6:	f7fb fad3 	bl	8000550 <__aeabi_dmul>
 8004faa:	a377      	add	r3, pc, #476	@ (adr r3, 8005188 <__ieee754_pow+0x748>)
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f7fb f918 	bl	80001e4 <__adddf3>
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	462b      	mov	r3, r5
 8004fb8:	f7fb faca 	bl	8000550 <__aeabi_dmul>
 8004fbc:	a374      	add	r3, pc, #464	@ (adr r3, 8005190 <__ieee754_pow+0x750>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb f90f 	bl	80001e4 <__adddf3>
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	f7fb fac1 	bl	8000550 <__aeabi_dmul>
 8004fce:	a372      	add	r3, pc, #456	@ (adr r3, 8005198 <__ieee754_pow+0x758>)
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb f906 	bl	80001e4 <__adddf3>
 8004fd8:	4622      	mov	r2, r4
 8004fda:	4606      	mov	r6, r0
 8004fdc:	460f      	mov	r7, r1
 8004fde:	462b      	mov	r3, r5
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb fab4 	bl	8000550 <__aeabi_dmul>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4630      	mov	r0, r6
 8004fee:	4639      	mov	r1, r7
 8004ff0:	f7fb faae 	bl	8000550 <__aeabi_dmul>
 8004ff4:	465a      	mov	r2, fp
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	460d      	mov	r5, r1
 8004ffa:	464b      	mov	r3, r9
 8004ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005000:	f7fb f8f0 	bl	80001e4 <__adddf3>
 8005004:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005008:	f7fb faa2 	bl	8000550 <__aeabi_dmul>
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	f7fb f8e8 	bl	80001e4 <__adddf3>
 8005014:	465a      	mov	r2, fp
 8005016:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800501a:	464b      	mov	r3, r9
 800501c:	4658      	mov	r0, fp
 800501e:	4649      	mov	r1, r9
 8005020:	f7fb fa96 	bl	8000550 <__aeabi_dmul>
 8005024:	4b6a      	ldr	r3, [pc, #424]	@ (80051d0 <__ieee754_pow+0x790>)
 8005026:	2200      	movs	r2, #0
 8005028:	4606      	mov	r6, r0
 800502a:	460f      	mov	r7, r1
 800502c:	f7fb f8da 	bl	80001e4 <__adddf3>
 8005030:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005034:	f7fb f8d6 	bl	80001e4 <__adddf3>
 8005038:	46d8      	mov	r8, fp
 800503a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800503e:	460d      	mov	r5, r1
 8005040:	465a      	mov	r2, fp
 8005042:	460b      	mov	r3, r1
 8005044:	4640      	mov	r0, r8
 8005046:	4649      	mov	r1, r9
 8005048:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800504c:	f7fb fa80 	bl	8000550 <__aeabi_dmul>
 8005050:	465c      	mov	r4, fp
 8005052:	4680      	mov	r8, r0
 8005054:	4689      	mov	r9, r1
 8005056:	4b5e      	ldr	r3, [pc, #376]	@ (80051d0 <__ieee754_pow+0x790>)
 8005058:	2200      	movs	r2, #0
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb f8bf 	bl	80001e0 <__aeabi_dsub>
 8005062:	4632      	mov	r2, r6
 8005064:	463b      	mov	r3, r7
 8005066:	f7fb f8bb 	bl	80001e0 <__aeabi_dsub>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005072:	f7fb f8b5 	bl	80001e0 <__aeabi_dsub>
 8005076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800507a:	f7fb fa69 	bl	8000550 <__aeabi_dmul>
 800507e:	4622      	mov	r2, r4
 8005080:	4606      	mov	r6, r0
 8005082:	460f      	mov	r7, r1
 8005084:	462b      	mov	r3, r5
 8005086:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800508a:	f7fb fa61 	bl	8000550 <__aeabi_dmul>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb f8a5 	bl	80001e4 <__adddf3>
 800509a:	4606      	mov	r6, r0
 800509c:	460f      	mov	r7, r1
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4640      	mov	r0, r8
 80050a4:	4649      	mov	r1, r9
 80050a6:	f7fb f89d 	bl	80001e4 <__adddf3>
 80050aa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80050ae:	a33c      	add	r3, pc, #240	@ (adr r3, 80051a0 <__ieee754_pow+0x760>)
 80050b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b4:	4658      	mov	r0, fp
 80050b6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80050ba:	460d      	mov	r5, r1
 80050bc:	f7fb fa48 	bl	8000550 <__aeabi_dmul>
 80050c0:	465c      	mov	r4, fp
 80050c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050c6:	4642      	mov	r2, r8
 80050c8:	464b      	mov	r3, r9
 80050ca:	4620      	mov	r0, r4
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb f887 	bl	80001e0 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4630      	mov	r0, r6
 80050d8:	4639      	mov	r1, r7
 80050da:	f7fb f881 	bl	80001e0 <__aeabi_dsub>
 80050de:	a332      	add	r3, pc, #200	@ (adr r3, 80051a8 <__ieee754_pow+0x768>)
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f7fb fa34 	bl	8000550 <__aeabi_dmul>
 80050e8:	a331      	add	r3, pc, #196	@ (adr r3, 80051b0 <__ieee754_pow+0x770>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	4606      	mov	r6, r0
 80050f0:	460f      	mov	r7, r1
 80050f2:	4620      	mov	r0, r4
 80050f4:	4629      	mov	r1, r5
 80050f6:	f7fb fa2b 	bl	8000550 <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4630      	mov	r0, r6
 8005100:	4639      	mov	r1, r7
 8005102:	f7fb f86f 	bl	80001e4 <__adddf3>
 8005106:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005108:	4b32      	ldr	r3, [pc, #200]	@ (80051d4 <__ieee754_pow+0x794>)
 800510a:	4413      	add	r3, r2
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb f868 	bl	80001e4 <__adddf3>
 8005114:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800511a:	f7fb f9af 	bl	800047c <__aeabi_i2d>
 800511e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005120:	4b2d      	ldr	r3, [pc, #180]	@ (80051d8 <__ieee754_pow+0x798>)
 8005122:	4413      	add	r3, r2
 8005124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005128:	4606      	mov	r6, r0
 800512a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800512e:	460f      	mov	r7, r1
 8005130:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005134:	f7fb f856 	bl	80001e4 <__adddf3>
 8005138:	4642      	mov	r2, r8
 800513a:	464b      	mov	r3, r9
 800513c:	f7fb f852 	bl	80001e4 <__adddf3>
 8005140:	4632      	mov	r2, r6
 8005142:	463b      	mov	r3, r7
 8005144:	f7fb f84e 	bl	80001e4 <__adddf3>
 8005148:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800514c:	4632      	mov	r2, r6
 800514e:	463b      	mov	r3, r7
 8005150:	4658      	mov	r0, fp
 8005152:	460d      	mov	r5, r1
 8005154:	f7fb f844 	bl	80001e0 <__aeabi_dsub>
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	f7fb f840 	bl	80001e0 <__aeabi_dsub>
 8005160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005164:	f7fb f83c 	bl	80001e0 <__aeabi_dsub>
 8005168:	465c      	mov	r4, fp
 800516a:	4602      	mov	r2, r0
 800516c:	e036      	b.n	80051dc <__ieee754_pow+0x79c>
 800516e:	bf00      	nop
 8005170:	4a454eef 	.word	0x4a454eef
 8005174:	3fca7e28 	.word	0x3fca7e28
 8005178:	93c9db65 	.word	0x93c9db65
 800517c:	3fcd864a 	.word	0x3fcd864a
 8005180:	a91d4101 	.word	0xa91d4101
 8005184:	3fd17460 	.word	0x3fd17460
 8005188:	518f264d 	.word	0x518f264d
 800518c:	3fd55555 	.word	0x3fd55555
 8005190:	db6fabff 	.word	0xdb6fabff
 8005194:	3fdb6db6 	.word	0x3fdb6db6
 8005198:	33333303 	.word	0x33333303
 800519c:	3fe33333 	.word	0x3fe33333
 80051a0:	e0000000 	.word	0xe0000000
 80051a4:	3feec709 	.word	0x3feec709
 80051a8:	dc3a03fd 	.word	0xdc3a03fd
 80051ac:	3feec709 	.word	0x3feec709
 80051b0:	145b01f5 	.word	0x145b01f5
 80051b4:	be3e2fe0 	.word	0xbe3e2fe0
 80051b8:	7ff00000 	.word	0x7ff00000
 80051bc:	43400000 	.word	0x43400000
 80051c0:	0003988e 	.word	0x0003988e
 80051c4:	000bb679 	.word	0x000bb679
 80051c8:	080066f8 	.word	0x080066f8
 80051cc:	3ff00000 	.word	0x3ff00000
 80051d0:	40080000 	.word	0x40080000
 80051d4:	080066d8 	.word	0x080066d8
 80051d8:	080066e8 	.word	0x080066e8
 80051dc:	460b      	mov	r3, r1
 80051de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051e2:	e5d7      	b.n	8004d94 <__ieee754_pow+0x354>
 80051e4:	f04f 0a01 	mov.w	sl, #1
 80051e8:	e65e      	b.n	8004ea8 <__ieee754_pow+0x468>
 80051ea:	a3b4      	add	r3, pc, #720	@ (adr r3, 80054bc <__ieee754_pow+0xa7c>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	4630      	mov	r0, r6
 80051f2:	4639      	mov	r1, r7
 80051f4:	f7fa fff6 	bl	80001e4 <__adddf3>
 80051f8:	4642      	mov	r2, r8
 80051fa:	e9cd 0100 	strd	r0, r1, [sp]
 80051fe:	464b      	mov	r3, r9
 8005200:	4620      	mov	r0, r4
 8005202:	4629      	mov	r1, r5
 8005204:	f7fa ffec 	bl	80001e0 <__aeabi_dsub>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005210:	f7fb fc2e 	bl	8000a70 <__aeabi_dcmpgt>
 8005214:	2800      	cmp	r0, #0
 8005216:	f47f ae00 	bne.w	8004e1a <__ieee754_pow+0x3da>
 800521a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800521e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005222:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8005226:	fa43 fa0a 	asr.w	sl, r3, sl
 800522a:	44da      	add	sl, fp
 800522c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005230:	489d      	ldr	r0, [pc, #628]	@ (80054a8 <__ieee754_pow+0xa68>)
 8005232:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005236:	4108      	asrs	r0, r1
 8005238:	ea00 030a 	and.w	r3, r0, sl
 800523c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005240:	f1c1 0114 	rsb	r1, r1, #20
 8005244:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005248:	fa4a fa01 	asr.w	sl, sl, r1
 800524c:	f1bb 0f00 	cmp.w	fp, #0
 8005250:	4640      	mov	r0, r8
 8005252:	4649      	mov	r1, r9
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	bfb8      	it	lt
 800525a:	f1ca 0a00 	rsblt	sl, sl, #0
 800525e:	f7fa ffbf 	bl	80001e0 <__aeabi_dsub>
 8005262:	4680      	mov	r8, r0
 8005264:	4689      	mov	r9, r1
 8005266:	4632      	mov	r2, r6
 8005268:	463b      	mov	r3, r7
 800526a:	4640      	mov	r0, r8
 800526c:	4649      	mov	r1, r9
 800526e:	f7fa ffb9 	bl	80001e4 <__adddf3>
 8005272:	2400      	movs	r4, #0
 8005274:	a37c      	add	r3, pc, #496	@ (adr r3, 8005468 <__ieee754_pow+0xa28>)
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	4620      	mov	r0, r4
 800527c:	460d      	mov	r5, r1
 800527e:	f7fb f967 	bl	8000550 <__aeabi_dmul>
 8005282:	4642      	mov	r2, r8
 8005284:	e9cd 0100 	strd	r0, r1, [sp]
 8005288:	464b      	mov	r3, r9
 800528a:	4620      	mov	r0, r4
 800528c:	4629      	mov	r1, r5
 800528e:	f7fa ffa7 	bl	80001e0 <__aeabi_dsub>
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4630      	mov	r0, r6
 8005298:	4639      	mov	r1, r7
 800529a:	f7fa ffa1 	bl	80001e0 <__aeabi_dsub>
 800529e:	a374      	add	r3, pc, #464	@ (adr r3, 8005470 <__ieee754_pow+0xa30>)
 80052a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a4:	f7fb f954 	bl	8000550 <__aeabi_dmul>
 80052a8:	a373      	add	r3, pc, #460	@ (adr r3, 8005478 <__ieee754_pow+0xa38>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	4680      	mov	r8, r0
 80052b0:	4689      	mov	r9, r1
 80052b2:	4620      	mov	r0, r4
 80052b4:	4629      	mov	r1, r5
 80052b6:	f7fb f94b 	bl	8000550 <__aeabi_dmul>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fa ff8f 	bl	80001e4 <__adddf3>
 80052c6:	4604      	mov	r4, r0
 80052c8:	460d      	mov	r5, r1
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052d2:	f7fa ff87 	bl	80001e4 <__adddf3>
 80052d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052da:	4680      	mov	r8, r0
 80052dc:	4689      	mov	r9, r1
 80052de:	f7fa ff7f 	bl	80001e0 <__aeabi_dsub>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4620      	mov	r0, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	f7fa ff79 	bl	80001e0 <__aeabi_dsub>
 80052ee:	4642      	mov	r2, r8
 80052f0:	4606      	mov	r6, r0
 80052f2:	460f      	mov	r7, r1
 80052f4:	464b      	mov	r3, r9
 80052f6:	4640      	mov	r0, r8
 80052f8:	4649      	mov	r1, r9
 80052fa:	f7fb f929 	bl	8000550 <__aeabi_dmul>
 80052fe:	a360      	add	r3, pc, #384	@ (adr r3, 8005480 <__ieee754_pow+0xa40>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	4604      	mov	r4, r0
 8005306:	460d      	mov	r5, r1
 8005308:	f7fb f922 	bl	8000550 <__aeabi_dmul>
 800530c:	a35e      	add	r3, pc, #376	@ (adr r3, 8005488 <__ieee754_pow+0xa48>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fa ff65 	bl	80001e0 <__aeabi_dsub>
 8005316:	4622      	mov	r2, r4
 8005318:	462b      	mov	r3, r5
 800531a:	f7fb f919 	bl	8000550 <__aeabi_dmul>
 800531e:	a35c      	add	r3, pc, #368	@ (adr r3, 8005490 <__ieee754_pow+0xa50>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f7fa ff5e 	bl	80001e4 <__adddf3>
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	f7fb f910 	bl	8000550 <__aeabi_dmul>
 8005330:	a359      	add	r3, pc, #356	@ (adr r3, 8005498 <__ieee754_pow+0xa58>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fa ff53 	bl	80001e0 <__aeabi_dsub>
 800533a:	4622      	mov	r2, r4
 800533c:	462b      	mov	r3, r5
 800533e:	f7fb f907 	bl	8000550 <__aeabi_dmul>
 8005342:	a357      	add	r3, pc, #348	@ (adr r3, 80054a0 <__ieee754_pow+0xa60>)
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	f7fa ff4c 	bl	80001e4 <__adddf3>
 800534c:	4622      	mov	r2, r4
 800534e:	462b      	mov	r3, r5
 8005350:	f7fb f8fe 	bl	8000550 <__aeabi_dmul>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fa ff40 	bl	80001e0 <__aeabi_dsub>
 8005360:	4604      	mov	r4, r0
 8005362:	460d      	mov	r5, r1
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4640      	mov	r0, r8
 800536a:	4649      	mov	r1, r9
 800536c:	f7fb f8f0 	bl	8000550 <__aeabi_dmul>
 8005370:	2200      	movs	r2, #0
 8005372:	e9cd 0100 	strd	r0, r1, [sp]
 8005376:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f7fa ff2f 	bl	80001e0 <__aeabi_dsub>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	e9dd 0100 	ldrd	r0, r1, [sp]
 800538a:	f7fb fa0b 	bl	80007a4 <__aeabi_ddiv>
 800538e:	4632      	mov	r2, r6
 8005390:	4604      	mov	r4, r0
 8005392:	460d      	mov	r5, r1
 8005394:	463b      	mov	r3, r7
 8005396:	4640      	mov	r0, r8
 8005398:	4649      	mov	r1, r9
 800539a:	f7fb f8d9 	bl	8000550 <__aeabi_dmul>
 800539e:	4632      	mov	r2, r6
 80053a0:	463b      	mov	r3, r7
 80053a2:	f7fa ff1f 	bl	80001e4 <__adddf3>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4620      	mov	r0, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7fa ff17 	bl	80001e0 <__aeabi_dsub>
 80053b2:	4642      	mov	r2, r8
 80053b4:	464b      	mov	r3, r9
 80053b6:	f7fa ff13 	bl	80001e0 <__aeabi_dsub>
 80053ba:	460b      	mov	r3, r1
 80053bc:	4602      	mov	r2, r0
 80053be:	493b      	ldr	r1, [pc, #236]	@ (80054ac <__ieee754_pow+0xa6c>)
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fa ff0d 	bl	80001e0 <__aeabi_dsub>
 80053c6:	ec41 0b10 	vmov	d0, r0, r1
 80053ca:	ee10 3a90 	vmov	r3, s1
 80053ce:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d6:	da30      	bge.n	800543a <__ieee754_pow+0x9fa>
 80053d8:	4650      	mov	r0, sl
 80053da:	f000 ff91 	bl	8006300 <scalbn>
 80053de:	ec51 0b10 	vmov	r0, r1, d0
 80053e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053e6:	f7ff bbd2 	b.w	8004b8e <__ieee754_pow+0x14e>
 80053ea:	4c31      	ldr	r4, [pc, #196]	@ (80054b0 <__ieee754_pow+0xa70>)
 80053ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d91a      	bls.n	800542a <__ieee754_pow+0x9ea>
 80053f4:	4b2f      	ldr	r3, [pc, #188]	@ (80054b4 <__ieee754_pow+0xa74>)
 80053f6:	440b      	add	r3, r1
 80053f8:	4303      	orrs	r3, r0
 80053fa:	d009      	beq.n	8005410 <__ieee754_pow+0x9d0>
 80053fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005400:	2200      	movs	r2, #0
 8005402:	2300      	movs	r3, #0
 8005404:	f7fb fb16 	bl	8000a34 <__aeabi_dcmplt>
 8005408:	3800      	subs	r0, #0
 800540a:	bf18      	it	ne
 800540c:	2001      	movne	r0, #1
 800540e:	e42b      	b.n	8004c68 <__ieee754_pow+0x228>
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	f7fa fee4 	bl	80001e0 <__aeabi_dsub>
 8005418:	4632      	mov	r2, r6
 800541a:	463b      	mov	r3, r7
 800541c:	f7fb fb1e 	bl	8000a5c <__aeabi_dcmpge>
 8005420:	2800      	cmp	r0, #0
 8005422:	d1eb      	bne.n	80053fc <__ieee754_pow+0x9bc>
 8005424:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80054c4 <__ieee754_pow+0xa84>
 8005428:	e6f7      	b.n	800521a <__ieee754_pow+0x7da>
 800542a:	469a      	mov	sl, r3
 800542c:	4b22      	ldr	r3, [pc, #136]	@ (80054b8 <__ieee754_pow+0xa78>)
 800542e:	459a      	cmp	sl, r3
 8005430:	f63f aef3 	bhi.w	800521a <__ieee754_pow+0x7da>
 8005434:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005438:	e715      	b.n	8005266 <__ieee754_pow+0x826>
 800543a:	ec51 0b10 	vmov	r0, r1, d0
 800543e:	4619      	mov	r1, r3
 8005440:	e7cf      	b.n	80053e2 <__ieee754_pow+0x9a2>
 8005442:	491a      	ldr	r1, [pc, #104]	@ (80054ac <__ieee754_pow+0xa6c>)
 8005444:	2000      	movs	r0, #0
 8005446:	f7ff bb18 	b.w	8004a7a <__ieee754_pow+0x3a>
 800544a:	2000      	movs	r0, #0
 800544c:	2100      	movs	r1, #0
 800544e:	f7ff bb14 	b.w	8004a7a <__ieee754_pow+0x3a>
 8005452:	4630      	mov	r0, r6
 8005454:	4639      	mov	r1, r7
 8005456:	f7ff bb10 	b.w	8004a7a <__ieee754_pow+0x3a>
 800545a:	460c      	mov	r4, r1
 800545c:	f7ff bb5e 	b.w	8004b1c <__ieee754_pow+0xdc>
 8005460:	2400      	movs	r4, #0
 8005462:	f7ff bb49 	b.w	8004af8 <__ieee754_pow+0xb8>
 8005466:	bf00      	nop
 8005468:	00000000 	.word	0x00000000
 800546c:	3fe62e43 	.word	0x3fe62e43
 8005470:	fefa39ef 	.word	0xfefa39ef
 8005474:	3fe62e42 	.word	0x3fe62e42
 8005478:	0ca86c39 	.word	0x0ca86c39
 800547c:	be205c61 	.word	0xbe205c61
 8005480:	72bea4d0 	.word	0x72bea4d0
 8005484:	3e663769 	.word	0x3e663769
 8005488:	c5d26bf1 	.word	0xc5d26bf1
 800548c:	3ebbbd41 	.word	0x3ebbbd41
 8005490:	af25de2c 	.word	0xaf25de2c
 8005494:	3f11566a 	.word	0x3f11566a
 8005498:	16bebd93 	.word	0x16bebd93
 800549c:	3f66c16c 	.word	0x3f66c16c
 80054a0:	5555553e 	.word	0x5555553e
 80054a4:	3fc55555 	.word	0x3fc55555
 80054a8:	fff00000 	.word	0xfff00000
 80054ac:	3ff00000 	.word	0x3ff00000
 80054b0:	4090cbff 	.word	0x4090cbff
 80054b4:	3f6f3400 	.word	0x3f6f3400
 80054b8:	3fe00000 	.word	0x3fe00000
 80054bc:	652b82fe 	.word	0x652b82fe
 80054c0:	3c971547 	.word	0x3c971547
 80054c4:	4090cc00 	.word	0x4090cc00

080054c8 <__ieee754_rem_pio2>:
 80054c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054cc:	ec57 6b10 	vmov	r6, r7, d0
 80054d0:	4bc5      	ldr	r3, [pc, #788]	@ (80057e8 <__ieee754_rem_pio2+0x320>)
 80054d2:	b08d      	sub	sp, #52	@ 0x34
 80054d4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80054d8:	4598      	cmp	r8, r3
 80054da:	4604      	mov	r4, r0
 80054dc:	9704      	str	r7, [sp, #16]
 80054de:	d807      	bhi.n	80054f0 <__ieee754_rem_pio2+0x28>
 80054e0:	2200      	movs	r2, #0
 80054e2:	2300      	movs	r3, #0
 80054e4:	ed80 0b00 	vstr	d0, [r0]
 80054e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80054ec:	2500      	movs	r5, #0
 80054ee:	e028      	b.n	8005542 <__ieee754_rem_pio2+0x7a>
 80054f0:	4bbe      	ldr	r3, [pc, #760]	@ (80057ec <__ieee754_rem_pio2+0x324>)
 80054f2:	4598      	cmp	r8, r3
 80054f4:	d878      	bhi.n	80055e8 <__ieee754_rem_pio2+0x120>
 80054f6:	9b04      	ldr	r3, [sp, #16]
 80054f8:	4dbd      	ldr	r5, [pc, #756]	@ (80057f0 <__ieee754_rem_pio2+0x328>)
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	4630      	mov	r0, r6
 80054fe:	a3ac      	add	r3, pc, #688	@ (adr r3, 80057b0 <__ieee754_rem_pio2+0x2e8>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	4639      	mov	r1, r7
 8005506:	dd38      	ble.n	800557a <__ieee754_rem_pio2+0xb2>
 8005508:	f7fa fe6a 	bl	80001e0 <__aeabi_dsub>
 800550c:	45a8      	cmp	r8, r5
 800550e:	4606      	mov	r6, r0
 8005510:	460f      	mov	r7, r1
 8005512:	d01a      	beq.n	800554a <__ieee754_rem_pio2+0x82>
 8005514:	a3a8      	add	r3, pc, #672	@ (adr r3, 80057b8 <__ieee754_rem_pio2+0x2f0>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa fe61 	bl	80001e0 <__aeabi_dsub>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4680      	mov	r8, r0
 8005524:	4689      	mov	r9, r1
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fa fe59 	bl	80001e0 <__aeabi_dsub>
 800552e:	a3a2      	add	r3, pc, #648	@ (adr r3, 80057b8 <__ieee754_rem_pio2+0x2f0>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f7fa fe54 	bl	80001e0 <__aeabi_dsub>
 8005538:	e9c4 8900 	strd	r8, r9, [r4]
 800553c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005540:	2501      	movs	r5, #1
 8005542:	4628      	mov	r0, r5
 8005544:	b00d      	add	sp, #52	@ 0x34
 8005546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800554a:	a39d      	add	r3, pc, #628	@ (adr r3, 80057c0 <__ieee754_rem_pio2+0x2f8>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f7fa fe46 	bl	80001e0 <__aeabi_dsub>
 8005554:	a39c      	add	r3, pc, #624	@ (adr r3, 80057c8 <__ieee754_rem_pio2+0x300>)
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	4606      	mov	r6, r0
 800555c:	460f      	mov	r7, r1
 800555e:	f7fa fe3f 	bl	80001e0 <__aeabi_dsub>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4680      	mov	r8, r0
 8005568:	4689      	mov	r9, r1
 800556a:	4630      	mov	r0, r6
 800556c:	4639      	mov	r1, r7
 800556e:	f7fa fe37 	bl	80001e0 <__aeabi_dsub>
 8005572:	a395      	add	r3, pc, #596	@ (adr r3, 80057c8 <__ieee754_rem_pio2+0x300>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	e7dc      	b.n	8005534 <__ieee754_rem_pio2+0x6c>
 800557a:	f7fa fe33 	bl	80001e4 <__adddf3>
 800557e:	45a8      	cmp	r8, r5
 8005580:	4606      	mov	r6, r0
 8005582:	460f      	mov	r7, r1
 8005584:	d018      	beq.n	80055b8 <__ieee754_rem_pio2+0xf0>
 8005586:	a38c      	add	r3, pc, #560	@ (adr r3, 80057b8 <__ieee754_rem_pio2+0x2f0>)
 8005588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558c:	f7fa fe2a 	bl	80001e4 <__adddf3>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4680      	mov	r8, r0
 8005596:	4689      	mov	r9, r1
 8005598:	4630      	mov	r0, r6
 800559a:	4639      	mov	r1, r7
 800559c:	f7fa fe20 	bl	80001e0 <__aeabi_dsub>
 80055a0:	a385      	add	r3, pc, #532	@ (adr r3, 80057b8 <__ieee754_rem_pio2+0x2f0>)
 80055a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a6:	f7fa fe1d 	bl	80001e4 <__adddf3>
 80055aa:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80055ae:	e9c4 8900 	strd	r8, r9, [r4]
 80055b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80055b6:	e7c4      	b.n	8005542 <__ieee754_rem_pio2+0x7a>
 80055b8:	a381      	add	r3, pc, #516	@ (adr r3, 80057c0 <__ieee754_rem_pio2+0x2f8>)
 80055ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055be:	f7fa fe11 	bl	80001e4 <__adddf3>
 80055c2:	a381      	add	r3, pc, #516	@ (adr r3, 80057c8 <__ieee754_rem_pio2+0x300>)
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	4606      	mov	r6, r0
 80055ca:	460f      	mov	r7, r1
 80055cc:	f7fa fe0a 	bl	80001e4 <__adddf3>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4680      	mov	r8, r0
 80055d6:	4689      	mov	r9, r1
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fa fe00 	bl	80001e0 <__aeabi_dsub>
 80055e0:	a379      	add	r3, pc, #484	@ (adr r3, 80057c8 <__ieee754_rem_pio2+0x300>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	e7de      	b.n	80055a6 <__ieee754_rem_pio2+0xde>
 80055e8:	4b82      	ldr	r3, [pc, #520]	@ (80057f4 <__ieee754_rem_pio2+0x32c>)
 80055ea:	4598      	cmp	r8, r3
 80055ec:	f200 80d1 	bhi.w	8005792 <__ieee754_rem_pio2+0x2ca>
 80055f0:	f000 fe7c 	bl	80062ec <fabs>
 80055f4:	ec57 6b10 	vmov	r6, r7, d0
 80055f8:	a375      	add	r3, pc, #468	@ (adr r3, 80057d0 <__ieee754_rem_pio2+0x308>)
 80055fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fe:	4630      	mov	r0, r6
 8005600:	4639      	mov	r1, r7
 8005602:	f7fa ffa5 	bl	8000550 <__aeabi_dmul>
 8005606:	4b7c      	ldr	r3, [pc, #496]	@ (80057f8 <__ieee754_rem_pio2+0x330>)
 8005608:	2200      	movs	r2, #0
 800560a:	f7fa fdeb 	bl	80001e4 <__adddf3>
 800560e:	f7fb fa4f 	bl	8000ab0 <__aeabi_d2iz>
 8005612:	4605      	mov	r5, r0
 8005614:	f7fa ff32 	bl	800047c <__aeabi_i2d>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005620:	a363      	add	r3, pc, #396	@ (adr r3, 80057b0 <__ieee754_rem_pio2+0x2e8>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	f7fa ff93 	bl	8000550 <__aeabi_dmul>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4630      	mov	r0, r6
 8005630:	4639      	mov	r1, r7
 8005632:	f7fa fdd5 	bl	80001e0 <__aeabi_dsub>
 8005636:	a360      	add	r3, pc, #384	@ (adr r3, 80057b8 <__ieee754_rem_pio2+0x2f0>)
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	4682      	mov	sl, r0
 800563e:	468b      	mov	fp, r1
 8005640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005644:	f7fa ff84 	bl	8000550 <__aeabi_dmul>
 8005648:	2d1f      	cmp	r5, #31
 800564a:	4606      	mov	r6, r0
 800564c:	460f      	mov	r7, r1
 800564e:	dc0c      	bgt.n	800566a <__ieee754_rem_pio2+0x1a2>
 8005650:	4b6a      	ldr	r3, [pc, #424]	@ (80057fc <__ieee754_rem_pio2+0x334>)
 8005652:	1e6a      	subs	r2, r5, #1
 8005654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005658:	4543      	cmp	r3, r8
 800565a:	d006      	beq.n	800566a <__ieee754_rem_pio2+0x1a2>
 800565c:	4632      	mov	r2, r6
 800565e:	463b      	mov	r3, r7
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	f7fa fdbc 	bl	80001e0 <__aeabi_dsub>
 8005668:	e00e      	b.n	8005688 <__ieee754_rem_pio2+0x1c0>
 800566a:	463b      	mov	r3, r7
 800566c:	4632      	mov	r2, r6
 800566e:	4650      	mov	r0, sl
 8005670:	4659      	mov	r1, fp
 8005672:	f7fa fdb5 	bl	80001e0 <__aeabi_dsub>
 8005676:	ea4f 5328 	mov.w	r3, r8, asr #20
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005680:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005684:	2b10      	cmp	r3, #16
 8005686:	dc02      	bgt.n	800568e <__ieee754_rem_pio2+0x1c6>
 8005688:	e9c4 0100 	strd	r0, r1, [r4]
 800568c:	e039      	b.n	8005702 <__ieee754_rem_pio2+0x23a>
 800568e:	a34c      	add	r3, pc, #304	@ (adr r3, 80057c0 <__ieee754_rem_pio2+0x2f8>)
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005698:	f7fa ff5a 	bl	8000550 <__aeabi_dmul>
 800569c:	4606      	mov	r6, r0
 800569e:	460f      	mov	r7, r1
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4650      	mov	r0, sl
 80056a6:	4659      	mov	r1, fp
 80056a8:	f7fa fd9a 	bl	80001e0 <__aeabi_dsub>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4680      	mov	r8, r0
 80056b2:	4689      	mov	r9, r1
 80056b4:	4650      	mov	r0, sl
 80056b6:	4659      	mov	r1, fp
 80056b8:	f7fa fd92 	bl	80001e0 <__aeabi_dsub>
 80056bc:	4632      	mov	r2, r6
 80056be:	463b      	mov	r3, r7
 80056c0:	f7fa fd8e 	bl	80001e0 <__aeabi_dsub>
 80056c4:	a340      	add	r3, pc, #256	@ (adr r3, 80057c8 <__ieee754_rem_pio2+0x300>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	4606      	mov	r6, r0
 80056cc:	460f      	mov	r7, r1
 80056ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d2:	f7fa ff3d 	bl	8000550 <__aeabi_dmul>
 80056d6:	4632      	mov	r2, r6
 80056d8:	463b      	mov	r3, r7
 80056da:	f7fa fd81 	bl	80001e0 <__aeabi_dsub>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4606      	mov	r6, r0
 80056e4:	460f      	mov	r7, r1
 80056e6:	4640      	mov	r0, r8
 80056e8:	4649      	mov	r1, r9
 80056ea:	f7fa fd79 	bl	80001e0 <__aeabi_dsub>
 80056ee:	9a05      	ldr	r2, [sp, #20]
 80056f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b31      	cmp	r3, #49	@ 0x31
 80056f8:	dc20      	bgt.n	800573c <__ieee754_rem_pio2+0x274>
 80056fa:	e9c4 0100 	strd	r0, r1, [r4]
 80056fe:	46c2      	mov	sl, r8
 8005700:	46cb      	mov	fp, r9
 8005702:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005706:	4650      	mov	r0, sl
 8005708:	4642      	mov	r2, r8
 800570a:	464b      	mov	r3, r9
 800570c:	4659      	mov	r1, fp
 800570e:	f7fa fd67 	bl	80001e0 <__aeabi_dsub>
 8005712:	463b      	mov	r3, r7
 8005714:	4632      	mov	r2, r6
 8005716:	f7fa fd63 	bl	80001e0 <__aeabi_dsub>
 800571a:	9b04      	ldr	r3, [sp, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005722:	f6bf af0e 	bge.w	8005542 <__ieee754_rem_pio2+0x7a>
 8005726:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800572a:	6063      	str	r3, [r4, #4]
 800572c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005730:	f8c4 8000 	str.w	r8, [r4]
 8005734:	60a0      	str	r0, [r4, #8]
 8005736:	60e3      	str	r3, [r4, #12]
 8005738:	426d      	negs	r5, r5
 800573a:	e702      	b.n	8005542 <__ieee754_rem_pio2+0x7a>
 800573c:	a326      	add	r3, pc, #152	@ (adr r3, 80057d8 <__ieee754_rem_pio2+0x310>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005746:	f7fa ff03 	bl	8000550 <__aeabi_dmul>
 800574a:	4606      	mov	r6, r0
 800574c:	460f      	mov	r7, r1
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4640      	mov	r0, r8
 8005754:	4649      	mov	r1, r9
 8005756:	f7fa fd43 	bl	80001e0 <__aeabi_dsub>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4682      	mov	sl, r0
 8005760:	468b      	mov	fp, r1
 8005762:	4640      	mov	r0, r8
 8005764:	4649      	mov	r1, r9
 8005766:	f7fa fd3b 	bl	80001e0 <__aeabi_dsub>
 800576a:	4632      	mov	r2, r6
 800576c:	463b      	mov	r3, r7
 800576e:	f7fa fd37 	bl	80001e0 <__aeabi_dsub>
 8005772:	a31b      	add	r3, pc, #108	@ (adr r3, 80057e0 <__ieee754_rem_pio2+0x318>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005780:	f7fa fee6 	bl	8000550 <__aeabi_dmul>
 8005784:	4632      	mov	r2, r6
 8005786:	463b      	mov	r3, r7
 8005788:	f7fa fd2a 	bl	80001e0 <__aeabi_dsub>
 800578c:	4606      	mov	r6, r0
 800578e:	460f      	mov	r7, r1
 8005790:	e764      	b.n	800565c <__ieee754_rem_pio2+0x194>
 8005792:	4b1b      	ldr	r3, [pc, #108]	@ (8005800 <__ieee754_rem_pio2+0x338>)
 8005794:	4598      	cmp	r8, r3
 8005796:	d935      	bls.n	8005804 <__ieee754_rem_pio2+0x33c>
 8005798:	4632      	mov	r2, r6
 800579a:	463b      	mov	r3, r7
 800579c:	4630      	mov	r0, r6
 800579e:	4639      	mov	r1, r7
 80057a0:	f7fa fd1e 	bl	80001e0 <__aeabi_dsub>
 80057a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80057a8:	e9c4 0100 	strd	r0, r1, [r4]
 80057ac:	e69e      	b.n	80054ec <__ieee754_rem_pio2+0x24>
 80057ae:	bf00      	nop
 80057b0:	54400000 	.word	0x54400000
 80057b4:	3ff921fb 	.word	0x3ff921fb
 80057b8:	1a626331 	.word	0x1a626331
 80057bc:	3dd0b461 	.word	0x3dd0b461
 80057c0:	1a600000 	.word	0x1a600000
 80057c4:	3dd0b461 	.word	0x3dd0b461
 80057c8:	2e037073 	.word	0x2e037073
 80057cc:	3ba3198a 	.word	0x3ba3198a
 80057d0:	6dc9c883 	.word	0x6dc9c883
 80057d4:	3fe45f30 	.word	0x3fe45f30
 80057d8:	2e000000 	.word	0x2e000000
 80057dc:	3ba3198a 	.word	0x3ba3198a
 80057e0:	252049c1 	.word	0x252049c1
 80057e4:	397b839a 	.word	0x397b839a
 80057e8:	3fe921fb 	.word	0x3fe921fb
 80057ec:	4002d97b 	.word	0x4002d97b
 80057f0:	3ff921fb 	.word	0x3ff921fb
 80057f4:	413921fb 	.word	0x413921fb
 80057f8:	3fe00000 	.word	0x3fe00000
 80057fc:	08006708 	.word	0x08006708
 8005800:	7fefffff 	.word	0x7fefffff
 8005804:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005808:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800580c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005810:	4630      	mov	r0, r6
 8005812:	460f      	mov	r7, r1
 8005814:	f7fb f94c 	bl	8000ab0 <__aeabi_d2iz>
 8005818:	f7fa fe30 	bl	800047c <__aeabi_i2d>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4630      	mov	r0, r6
 8005822:	4639      	mov	r1, r7
 8005824:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005828:	f7fa fcda 	bl	80001e0 <__aeabi_dsub>
 800582c:	4b22      	ldr	r3, [pc, #136]	@ (80058b8 <__ieee754_rem_pio2+0x3f0>)
 800582e:	2200      	movs	r2, #0
 8005830:	f7fa fe8e 	bl	8000550 <__aeabi_dmul>
 8005834:	460f      	mov	r7, r1
 8005836:	4606      	mov	r6, r0
 8005838:	f7fb f93a 	bl	8000ab0 <__aeabi_d2iz>
 800583c:	f7fa fe1e 	bl	800047c <__aeabi_i2d>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4630      	mov	r0, r6
 8005846:	4639      	mov	r1, r7
 8005848:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800584c:	f7fa fcc8 	bl	80001e0 <__aeabi_dsub>
 8005850:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <__ieee754_rem_pio2+0x3f0>)
 8005852:	2200      	movs	r2, #0
 8005854:	f7fa fe7c 	bl	8000550 <__aeabi_dmul>
 8005858:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800585c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005860:	f04f 0803 	mov.w	r8, #3
 8005864:	2600      	movs	r6, #0
 8005866:	2700      	movs	r7, #0
 8005868:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800586c:	4632      	mov	r2, r6
 800586e:	463b      	mov	r3, r7
 8005870:	46c2      	mov	sl, r8
 8005872:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005876:	f7fb f8d3 	bl	8000a20 <__aeabi_dcmpeq>
 800587a:	2800      	cmp	r0, #0
 800587c:	d1f4      	bne.n	8005868 <__ieee754_rem_pio2+0x3a0>
 800587e:	4b0f      	ldr	r3, [pc, #60]	@ (80058bc <__ieee754_rem_pio2+0x3f4>)
 8005880:	9301      	str	r3, [sp, #4]
 8005882:	2302      	movs	r3, #2
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	462a      	mov	r2, r5
 8005888:	4653      	mov	r3, sl
 800588a:	4621      	mov	r1, r4
 800588c:	a806      	add	r0, sp, #24
 800588e:	f000 f853 	bl	8005938 <__kernel_rem_pio2>
 8005892:	9b04      	ldr	r3, [sp, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	4605      	mov	r5, r0
 8005898:	f6bf ae53 	bge.w	8005542 <__ieee754_rem_pio2+0x7a>
 800589c:	e9d4 2100 	ldrd	r2, r1, [r4]
 80058a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80058a4:	e9c4 2300 	strd	r2, r3, [r4]
 80058a8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80058ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80058b0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80058b4:	e740      	b.n	8005738 <__ieee754_rem_pio2+0x270>
 80058b6:	bf00      	nop
 80058b8:	41700000 	.word	0x41700000
 80058bc:	08006788 	.word	0x08006788

080058c0 <with_errno>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	ed2d 8b02 	vpush	{d8}
 80058c6:	eeb0 8a40 	vmov.f32	s16, s0
 80058ca:	eef0 8a60 	vmov.f32	s17, s1
 80058ce:	4604      	mov	r4, r0
 80058d0:	f7fe ff74 	bl	80047bc <__errno>
 80058d4:	eeb0 0a48 	vmov.f32	s0, s16
 80058d8:	eef0 0a68 	vmov.f32	s1, s17
 80058dc:	ecbd 8b02 	vpop	{d8}
 80058e0:	6004      	str	r4, [r0, #0]
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <xflow>:
 80058e4:	4603      	mov	r3, r0
 80058e6:	b507      	push	{r0, r1, r2, lr}
 80058e8:	ec51 0b10 	vmov	r0, r1, d0
 80058ec:	b183      	cbz	r3, 8005910 <xflow+0x2c>
 80058ee:	4602      	mov	r2, r0
 80058f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80058f4:	e9cd 2300 	strd	r2, r3, [sp]
 80058f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058fc:	f7fa fe28 	bl	8000550 <__aeabi_dmul>
 8005900:	ec41 0b10 	vmov	d0, r0, r1
 8005904:	2022      	movs	r0, #34	@ 0x22
 8005906:	b003      	add	sp, #12
 8005908:	f85d eb04 	ldr.w	lr, [sp], #4
 800590c:	f7ff bfd8 	b.w	80058c0 <with_errno>
 8005910:	4602      	mov	r2, r0
 8005912:	460b      	mov	r3, r1
 8005914:	e7ee      	b.n	80058f4 <xflow+0x10>
	...

08005918 <__math_uflow>:
 8005918:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005920 <__math_uflow+0x8>
 800591c:	f7ff bfe2 	b.w	80058e4 <xflow>
 8005920:	00000000 	.word	0x00000000
 8005924:	10000000 	.word	0x10000000

08005928 <__math_oflow>:
 8005928:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005930 <__math_oflow+0x8>
 800592c:	f7ff bfda 	b.w	80058e4 <xflow>
 8005930:	00000000 	.word	0x00000000
 8005934:	70000000 	.word	0x70000000

08005938 <__kernel_rem_pio2>:
 8005938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593c:	ed2d 8b02 	vpush	{d8}
 8005940:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005944:	f112 0f14 	cmn.w	r2, #20
 8005948:	9306      	str	r3, [sp, #24]
 800594a:	9104      	str	r1, [sp, #16]
 800594c:	4bbe      	ldr	r3, [pc, #760]	@ (8005c48 <__kernel_rem_pio2+0x310>)
 800594e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005950:	9008      	str	r0, [sp, #32]
 8005952:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	9b06      	ldr	r3, [sp, #24]
 800595a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800595e:	bfa8      	it	ge
 8005960:	1ed4      	subge	r4, r2, #3
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	bfb2      	itee	lt
 8005966:	2400      	movlt	r4, #0
 8005968:	2318      	movge	r3, #24
 800596a:	fb94 f4f3 	sdivge	r4, r4, r3
 800596e:	f06f 0317 	mvn.w	r3, #23
 8005972:	fb04 3303 	mla	r3, r4, r3, r3
 8005976:	eb03 0b02 	add.w	fp, r3, r2
 800597a:	9b00      	ldr	r3, [sp, #0]
 800597c:	9a05      	ldr	r2, [sp, #20]
 800597e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8005c38 <__kernel_rem_pio2+0x300>
 8005982:	eb03 0802 	add.w	r8, r3, r2
 8005986:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005988:	1aa7      	subs	r7, r4, r2
 800598a:	ae20      	add	r6, sp, #128	@ 0x80
 800598c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005990:	2500      	movs	r5, #0
 8005992:	4545      	cmp	r5, r8
 8005994:	dd13      	ble.n	80059be <__kernel_rem_pio2+0x86>
 8005996:	9b06      	ldr	r3, [sp, #24]
 8005998:	aa20      	add	r2, sp, #128	@ 0x80
 800599a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800599e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80059a2:	f04f 0800 	mov.w	r8, #0
 80059a6:	9b00      	ldr	r3, [sp, #0]
 80059a8:	4598      	cmp	r8, r3
 80059aa:	dc31      	bgt.n	8005a10 <__kernel_rem_pio2+0xd8>
 80059ac:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8005c38 <__kernel_rem_pio2+0x300>
 80059b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80059b8:	462f      	mov	r7, r5
 80059ba:	2600      	movs	r6, #0
 80059bc:	e01b      	b.n	80059f6 <__kernel_rem_pio2+0xbe>
 80059be:	42ef      	cmn	r7, r5
 80059c0:	d407      	bmi.n	80059d2 <__kernel_rem_pio2+0x9a>
 80059c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80059c6:	f7fa fd59 	bl	800047c <__aeabi_i2d>
 80059ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80059ce:	3501      	adds	r5, #1
 80059d0:	e7df      	b.n	8005992 <__kernel_rem_pio2+0x5a>
 80059d2:	ec51 0b18 	vmov	r0, r1, d8
 80059d6:	e7f8      	b.n	80059ca <__kernel_rem_pio2+0x92>
 80059d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80059e0:	f7fa fdb6 	bl	8000550 <__aeabi_dmul>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ec:	f7fa fbfa 	bl	80001e4 <__adddf3>
 80059f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f4:	3601      	adds	r6, #1
 80059f6:	9b05      	ldr	r3, [sp, #20]
 80059f8:	429e      	cmp	r6, r3
 80059fa:	f1a7 0708 	sub.w	r7, r7, #8
 80059fe:	ddeb      	ble.n	80059d8 <__kernel_rem_pio2+0xa0>
 8005a00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a04:	f108 0801 	add.w	r8, r8, #1
 8005a08:	ecaa 7b02 	vstmia	sl!, {d7}
 8005a0c:	3508      	adds	r5, #8
 8005a0e:	e7ca      	b.n	80059a6 <__kernel_rem_pio2+0x6e>
 8005a10:	9b00      	ldr	r3, [sp, #0]
 8005a12:	f8dd 8000 	ldr.w	r8, [sp]
 8005a16:	aa0c      	add	r2, sp, #48	@ 0x30
 8005a18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005a1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005a20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a26:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a2c:	ab98      	add	r3, sp, #608	@ 0x260
 8005a2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005a32:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005a36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a3a:	ac0c      	add	r4, sp, #48	@ 0x30
 8005a3c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005a3e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005a42:	46a1      	mov	r9, r4
 8005a44:	46c2      	mov	sl, r8
 8005a46:	f1ba 0f00 	cmp.w	sl, #0
 8005a4a:	f1a5 0508 	sub.w	r5, r5, #8
 8005a4e:	dc77      	bgt.n	8005b40 <__kernel_rem_pio2+0x208>
 8005a50:	4658      	mov	r0, fp
 8005a52:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005a56:	f000 fc53 	bl	8006300 <scalbn>
 8005a5a:	ec57 6b10 	vmov	r6, r7, d0
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005a64:	4630      	mov	r0, r6
 8005a66:	4639      	mov	r1, r7
 8005a68:	f7fa fd72 	bl	8000550 <__aeabi_dmul>
 8005a6c:	ec41 0b10 	vmov	d0, r0, r1
 8005a70:	f000 fd9e 	bl	80065b0 <floor>
 8005a74:	4b75      	ldr	r3, [pc, #468]	@ (8005c4c <__kernel_rem_pio2+0x314>)
 8005a76:	ec51 0b10 	vmov	r0, r1, d0
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fd68 	bl	8000550 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4630      	mov	r0, r6
 8005a86:	4639      	mov	r1, r7
 8005a88:	f7fa fbaa 	bl	80001e0 <__aeabi_dsub>
 8005a8c:	460f      	mov	r7, r1
 8005a8e:	4606      	mov	r6, r0
 8005a90:	f7fb f80e 	bl	8000ab0 <__aeabi_d2iz>
 8005a94:	9002      	str	r0, [sp, #8]
 8005a96:	f7fa fcf1 	bl	800047c <__aeabi_i2d>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	f7fa fb9d 	bl	80001e0 <__aeabi_dsub>
 8005aa6:	f1bb 0f00 	cmp.w	fp, #0
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460f      	mov	r7, r1
 8005aae:	dd6c      	ble.n	8005b8a <__kernel_rem_pio2+0x252>
 8005ab0:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8005ab4:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ab6:	9d02      	ldr	r5, [sp, #8]
 8005ab8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005abc:	f1cb 0018 	rsb	r0, fp, #24
 8005ac0:	fa43 f200 	asr.w	r2, r3, r0
 8005ac4:	4415      	add	r5, r2
 8005ac6:	4082      	lsls	r2, r0
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	aa0c      	add	r2, sp, #48	@ 0x30
 8005acc:	9502      	str	r5, [sp, #8]
 8005ace:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005ad2:	f1cb 0217 	rsb	r2, fp, #23
 8005ad6:	fa43 f902 	asr.w	r9, r3, r2
 8005ada:	f1b9 0f00 	cmp.w	r9, #0
 8005ade:	dd64      	ble.n	8005baa <__kernel_rem_pio2+0x272>
 8005ae0:	9b02      	ldr	r3, [sp, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	9302      	str	r3, [sp, #8]
 8005ae8:	4615      	mov	r5, r2
 8005aea:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005aee:	4590      	cmp	r8, r2
 8005af0:	f300 80b8 	bgt.w	8005c64 <__kernel_rem_pio2+0x32c>
 8005af4:	f1bb 0f00 	cmp.w	fp, #0
 8005af8:	dd07      	ble.n	8005b0a <__kernel_rem_pio2+0x1d2>
 8005afa:	f1bb 0f01 	cmp.w	fp, #1
 8005afe:	f000 80bf 	beq.w	8005c80 <__kernel_rem_pio2+0x348>
 8005b02:	f1bb 0f02 	cmp.w	fp, #2
 8005b06:	f000 80c6 	beq.w	8005c96 <__kernel_rem_pio2+0x35e>
 8005b0a:	f1b9 0f02 	cmp.w	r9, #2
 8005b0e:	d14c      	bne.n	8005baa <__kernel_rem_pio2+0x272>
 8005b10:	4632      	mov	r2, r6
 8005b12:	463b      	mov	r3, r7
 8005b14:	494e      	ldr	r1, [pc, #312]	@ (8005c50 <__kernel_rem_pio2+0x318>)
 8005b16:	2000      	movs	r0, #0
 8005b18:	f7fa fb62 	bl	80001e0 <__aeabi_dsub>
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	460f      	mov	r7, r1
 8005b20:	2d00      	cmp	r5, #0
 8005b22:	d042      	beq.n	8005baa <__kernel_rem_pio2+0x272>
 8005b24:	4658      	mov	r0, fp
 8005b26:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8005c40 <__kernel_rem_pio2+0x308>
 8005b2a:	f000 fbe9 	bl	8006300 <scalbn>
 8005b2e:	4630      	mov	r0, r6
 8005b30:	4639      	mov	r1, r7
 8005b32:	ec53 2b10 	vmov	r2, r3, d0
 8005b36:	f7fa fb53 	bl	80001e0 <__aeabi_dsub>
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460f      	mov	r7, r1
 8005b3e:	e034      	b.n	8005baa <__kernel_rem_pio2+0x272>
 8005b40:	4b44      	ldr	r3, [pc, #272]	@ (8005c54 <__kernel_rem_pio2+0x31c>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b48:	f7fa fd02 	bl	8000550 <__aeabi_dmul>
 8005b4c:	f7fa ffb0 	bl	8000ab0 <__aeabi_d2iz>
 8005b50:	f7fa fc94 	bl	800047c <__aeabi_i2d>
 8005b54:	4b40      	ldr	r3, [pc, #256]	@ (8005c58 <__kernel_rem_pio2+0x320>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	4606      	mov	r6, r0
 8005b5a:	460f      	mov	r7, r1
 8005b5c:	f7fa fcf8 	bl	8000550 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b68:	f7fa fb3a 	bl	80001e0 <__aeabi_dsub>
 8005b6c:	f7fa ffa0 	bl	8000ab0 <__aeabi_d2iz>
 8005b70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b74:	f849 0b04 	str.w	r0, [r9], #4
 8005b78:	4639      	mov	r1, r7
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	f7fa fb32 	bl	80001e4 <__adddf3>
 8005b80:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b88:	e75d      	b.n	8005a46 <__kernel_rem_pio2+0x10e>
 8005b8a:	d107      	bne.n	8005b9c <__kernel_rem_pio2+0x264>
 8005b8c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8005b90:	aa0c      	add	r2, sp, #48	@ 0x30
 8005b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b96:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005b9a:	e79e      	b.n	8005ada <__kernel_rem_pio2+0x1a2>
 8005b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c5c <__kernel_rem_pio2+0x324>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f7fa ff5c 	bl	8000a5c <__aeabi_dcmpge>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d143      	bne.n	8005c30 <__kernel_rem_pio2+0x2f8>
 8005ba8:	4681      	mov	r9, r0
 8005baa:	2200      	movs	r2, #0
 8005bac:	2300      	movs	r3, #0
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	f7fa ff35 	bl	8000a20 <__aeabi_dcmpeq>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	f000 80bf 	beq.w	8005d3a <__kernel_rem_pio2+0x402>
 8005bbc:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	9900      	ldr	r1, [sp, #0]
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	da6e      	bge.n	8005ca6 <__kernel_rem_pio2+0x36e>
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	f000 8089 	beq.w	8005ce0 <__kernel_rem_pio2+0x3a8>
 8005bce:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005bd2:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bd4:	f1ab 0b18 	sub.w	fp, fp, #24
 8005bd8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d0f6      	beq.n	8005bce <__kernel_rem_pio2+0x296>
 8005be0:	4658      	mov	r0, fp
 8005be2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8005c40 <__kernel_rem_pio2+0x308>
 8005be6:	f000 fb8b 	bl	8006300 <scalbn>
 8005bea:	f108 0301 	add.w	r3, r8, #1
 8005bee:	00da      	lsls	r2, r3, #3
 8005bf0:	9205      	str	r2, [sp, #20]
 8005bf2:	ec55 4b10 	vmov	r4, r5, d0
 8005bf6:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005bf8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8005c54 <__kernel_rem_pio2+0x31c>
 8005bfc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005c00:	4646      	mov	r6, r8
 8005c02:	f04f 0a00 	mov.w	sl, #0
 8005c06:	2e00      	cmp	r6, #0
 8005c08:	f280 80cf 	bge.w	8005daa <__kernel_rem_pio2+0x472>
 8005c0c:	4644      	mov	r4, r8
 8005c0e:	2c00      	cmp	r4, #0
 8005c10:	f2c0 80fd 	blt.w	8005e0e <__kernel_rem_pio2+0x4d6>
 8005c14:	4b12      	ldr	r3, [pc, #72]	@ (8005c60 <__kernel_rem_pio2+0x328>)
 8005c16:	461f      	mov	r7, r3
 8005c18:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005c1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c1e:	9306      	str	r3, [sp, #24]
 8005c20:	f04f 0a00 	mov.w	sl, #0
 8005c24:	f04f 0b00 	mov.w	fp, #0
 8005c28:	2600      	movs	r6, #0
 8005c2a:	eba8 0504 	sub.w	r5, r8, r4
 8005c2e:	e0e2      	b.n	8005df6 <__kernel_rem_pio2+0x4be>
 8005c30:	f04f 0902 	mov.w	r9, #2
 8005c34:	e754      	b.n	8005ae0 <__kernel_rem_pio2+0x1a8>
 8005c36:	bf00      	nop
	...
 8005c44:	3ff00000 	.word	0x3ff00000
 8005c48:	080068d0 	.word	0x080068d0
 8005c4c:	40200000 	.word	0x40200000
 8005c50:	3ff00000 	.word	0x3ff00000
 8005c54:	3e700000 	.word	0x3e700000
 8005c58:	41700000 	.word	0x41700000
 8005c5c:	3fe00000 	.word	0x3fe00000
 8005c60:	08006890 	.word	0x08006890
 8005c64:	f854 3b04 	ldr.w	r3, [r4], #4
 8005c68:	b945      	cbnz	r5, 8005c7c <__kernel_rem_pio2+0x344>
 8005c6a:	b123      	cbz	r3, 8005c76 <__kernel_rem_pio2+0x33e>
 8005c6c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005c70:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c74:	2301      	movs	r3, #1
 8005c76:	3201      	adds	r2, #1
 8005c78:	461d      	mov	r5, r3
 8005c7a:	e738      	b.n	8005aee <__kernel_rem_pio2+0x1b6>
 8005c7c:	1acb      	subs	r3, r1, r3
 8005c7e:	e7f7      	b.n	8005c70 <__kernel_rem_pio2+0x338>
 8005c80:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8005c84:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005c8e:	a90c      	add	r1, sp, #48	@ 0x30
 8005c90:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005c94:	e739      	b.n	8005b0a <__kernel_rem_pio2+0x1d2>
 8005c96:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8005c9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8005c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ca4:	e7f3      	b.n	8005c8e <__kernel_rem_pio2+0x356>
 8005ca6:	a90c      	add	r1, sp, #48	@ 0x30
 8005ca8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	e787      	b.n	8005bc2 <__kernel_rem_pio2+0x28a>
 8005cb2:	3401      	adds	r4, #1
 8005cb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005cb8:	2a00      	cmp	r2, #0
 8005cba:	d0fa      	beq.n	8005cb2 <__kernel_rem_pio2+0x37a>
 8005cbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cbe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005cc2:	eb0d 0503 	add.w	r5, sp, r3
 8005cc6:	9b06      	ldr	r3, [sp, #24]
 8005cc8:	aa20      	add	r2, sp, #128	@ 0x80
 8005cca:	4443      	add	r3, r8
 8005ccc:	f108 0701 	add.w	r7, r8, #1
 8005cd0:	3d98      	subs	r5, #152	@ 0x98
 8005cd2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005cd6:	4444      	add	r4, r8
 8005cd8:	42bc      	cmp	r4, r7
 8005cda:	da04      	bge.n	8005ce6 <__kernel_rem_pio2+0x3ae>
 8005cdc:	46a0      	mov	r8, r4
 8005cde:	e6a2      	b.n	8005a26 <__kernel_rem_pio2+0xee>
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ce2:	2401      	movs	r4, #1
 8005ce4:	e7e6      	b.n	8005cb4 <__kernel_rem_pio2+0x37c>
 8005ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ce8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005cec:	f7fa fbc6 	bl	800047c <__aeabi_i2d>
 8005cf0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8005fb8 <__kernel_rem_pio2+0x680>
 8005cf4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005cf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d00:	46b2      	mov	sl, r6
 8005d02:	f04f 0800 	mov.w	r8, #0
 8005d06:	9b05      	ldr	r3, [sp, #20]
 8005d08:	4598      	cmp	r8, r3
 8005d0a:	dd05      	ble.n	8005d18 <__kernel_rem_pio2+0x3e0>
 8005d0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d10:	3701      	adds	r7, #1
 8005d12:	eca5 7b02 	vstmia	r5!, {d7}
 8005d16:	e7df      	b.n	8005cd8 <__kernel_rem_pio2+0x3a0>
 8005d18:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005d1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d2c:	f7fa fa5a 	bl	80001e4 <__adddf3>
 8005d30:	f108 0801 	add.w	r8, r8, #1
 8005d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d38:	e7e5      	b.n	8005d06 <__kernel_rem_pio2+0x3ce>
 8005d3a:	f1cb 0000 	rsb	r0, fp, #0
 8005d3e:	ec47 6b10 	vmov	d0, r6, r7
 8005d42:	f000 fadd 	bl	8006300 <scalbn>
 8005d46:	ec55 4b10 	vmov	r4, r5, d0
 8005d4a:	4b9d      	ldr	r3, [pc, #628]	@ (8005fc0 <__kernel_rem_pio2+0x688>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4620      	mov	r0, r4
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7fa fe83 	bl	8000a5c <__aeabi_dcmpge>
 8005d56:	b300      	cbz	r0, 8005d9a <__kernel_rem_pio2+0x462>
 8005d58:	4b9a      	ldr	r3, [pc, #616]	@ (8005fc4 <__kernel_rem_pio2+0x68c>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fbf6 	bl	8000550 <__aeabi_dmul>
 8005d64:	f7fa fea4 	bl	8000ab0 <__aeabi_d2iz>
 8005d68:	4606      	mov	r6, r0
 8005d6a:	f7fa fb87 	bl	800047c <__aeabi_i2d>
 8005d6e:	4b94      	ldr	r3, [pc, #592]	@ (8005fc0 <__kernel_rem_pio2+0x688>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	f7fa fbed 	bl	8000550 <__aeabi_dmul>
 8005d76:	460b      	mov	r3, r1
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f7fa fa2f 	bl	80001e0 <__aeabi_dsub>
 8005d82:	f7fa fe95 	bl	8000ab0 <__aeabi_d2iz>
 8005d86:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d88:	f10b 0b18 	add.w	fp, fp, #24
 8005d8c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005d90:	f108 0801 	add.w	r8, r8, #1
 8005d94:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8005d98:	e722      	b.n	8005be0 <__kernel_rem_pio2+0x2a8>
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f7fa fe87 	bl	8000ab0 <__aeabi_d2iz>
 8005da2:	ab0c      	add	r3, sp, #48	@ 0x30
 8005da4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8005da8:	e71a      	b.n	8005be0 <__kernel_rem_pio2+0x2a8>
 8005daa:	ab0c      	add	r3, sp, #48	@ 0x30
 8005dac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005db0:	f7fa fb64 	bl	800047c <__aeabi_i2d>
 8005db4:	4622      	mov	r2, r4
 8005db6:	462b      	mov	r3, r5
 8005db8:	f7fa fbca 	bl	8000550 <__aeabi_dmul>
 8005dbc:	4652      	mov	r2, sl
 8005dbe:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8005dc2:	465b      	mov	r3, fp
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f7fa fbc2 	bl	8000550 <__aeabi_dmul>
 8005dcc:	3e01      	subs	r6, #1
 8005dce:	4604      	mov	r4, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	e718      	b.n	8005c06 <__kernel_rem_pio2+0x2ce>
 8005dd4:	9906      	ldr	r1, [sp, #24]
 8005dd6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005dda:	9106      	str	r1, [sp, #24]
 8005ddc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8005de0:	f7fa fbb6 	bl	8000550 <__aeabi_dmul>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4650      	mov	r0, sl
 8005dea:	4659      	mov	r1, fp
 8005dec:	f7fa f9fa 	bl	80001e4 <__adddf3>
 8005df0:	3601      	adds	r6, #1
 8005df2:	4682      	mov	sl, r0
 8005df4:	468b      	mov	fp, r1
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	429e      	cmp	r6, r3
 8005dfa:	dc01      	bgt.n	8005e00 <__kernel_rem_pio2+0x4c8>
 8005dfc:	42b5      	cmp	r5, r6
 8005dfe:	dae9      	bge.n	8005dd4 <__kernel_rem_pio2+0x49c>
 8005e00:	ab48      	add	r3, sp, #288	@ 0x120
 8005e02:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005e06:	e9c5 ab00 	strd	sl, fp, [r5]
 8005e0a:	3c01      	subs	r4, #1
 8005e0c:	e6ff      	b.n	8005c0e <__kernel_rem_pio2+0x2d6>
 8005e0e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	dc0b      	bgt.n	8005e2c <__kernel_rem_pio2+0x4f4>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dc39      	bgt.n	8005e8c <__kernel_rem_pio2+0x554>
 8005e18:	d05d      	beq.n	8005ed6 <__kernel_rem_pio2+0x59e>
 8005e1a:	9b02      	ldr	r3, [sp, #8]
 8005e1c:	f003 0007 	and.w	r0, r3, #7
 8005e20:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005e24:	ecbd 8b02 	vpop	{d8}
 8005e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e2c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d1f3      	bne.n	8005e1a <__kernel_rem_pio2+0x4e2>
 8005e32:	9b05      	ldr	r3, [sp, #20]
 8005e34:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005e38:	eb0d 0403 	add.w	r4, sp, r3
 8005e3c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8005e40:	4625      	mov	r5, r4
 8005e42:	46c2      	mov	sl, r8
 8005e44:	f1ba 0f00 	cmp.w	sl, #0
 8005e48:	f1a5 0508 	sub.w	r5, r5, #8
 8005e4c:	dc6b      	bgt.n	8005f26 <__kernel_rem_pio2+0x5ee>
 8005e4e:	4645      	mov	r5, r8
 8005e50:	2d01      	cmp	r5, #1
 8005e52:	f1a4 0408 	sub.w	r4, r4, #8
 8005e56:	f300 8087 	bgt.w	8005f68 <__kernel_rem_pio2+0x630>
 8005e5a:	9c05      	ldr	r4, [sp, #20]
 8005e5c:	ab48      	add	r3, sp, #288	@ 0x120
 8005e5e:	441c      	add	r4, r3
 8005e60:	2000      	movs	r0, #0
 8005e62:	2100      	movs	r1, #0
 8005e64:	f1b8 0f01 	cmp.w	r8, #1
 8005e68:	f300 809c 	bgt.w	8005fa4 <__kernel_rem_pio2+0x66c>
 8005e6c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005e70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005e74:	f1b9 0f00 	cmp.w	r9, #0
 8005e78:	f040 80a6 	bne.w	8005fc8 <__kernel_rem_pio2+0x690>
 8005e7c:	9b04      	ldr	r3, [sp, #16]
 8005e7e:	e9c3 7800 	strd	r7, r8, [r3]
 8005e82:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005e86:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005e8a:	e7c6      	b.n	8005e1a <__kernel_rem_pio2+0x4e2>
 8005e8c:	9d05      	ldr	r5, [sp, #20]
 8005e8e:	ab48      	add	r3, sp, #288	@ 0x120
 8005e90:	441d      	add	r5, r3
 8005e92:	4644      	mov	r4, r8
 8005e94:	2000      	movs	r0, #0
 8005e96:	2100      	movs	r1, #0
 8005e98:	2c00      	cmp	r4, #0
 8005e9a:	da35      	bge.n	8005f08 <__kernel_rem_pio2+0x5d0>
 8005e9c:	f1b9 0f00 	cmp.w	r9, #0
 8005ea0:	d038      	beq.n	8005f14 <__kernel_rem_pio2+0x5dc>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ea8:	9c04      	ldr	r4, [sp, #16]
 8005eaa:	e9c4 2300 	strd	r2, r3, [r4]
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005eb6:	f7fa f993 	bl	80001e0 <__aeabi_dsub>
 8005eba:	ad4a      	add	r5, sp, #296	@ 0x128
 8005ebc:	2401      	movs	r4, #1
 8005ebe:	45a0      	cmp	r8, r4
 8005ec0:	da2b      	bge.n	8005f1a <__kernel_rem_pio2+0x5e2>
 8005ec2:	f1b9 0f00 	cmp.w	r9, #0
 8005ec6:	d002      	beq.n	8005ece <__kernel_rem_pio2+0x596>
 8005ec8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ecc:	4619      	mov	r1, r3
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005ed4:	e7a1      	b.n	8005e1a <__kernel_rem_pio2+0x4e2>
 8005ed6:	9c05      	ldr	r4, [sp, #20]
 8005ed8:	ab48      	add	r3, sp, #288	@ 0x120
 8005eda:	441c      	add	r4, r3
 8005edc:	2000      	movs	r0, #0
 8005ede:	2100      	movs	r1, #0
 8005ee0:	f1b8 0f00 	cmp.w	r8, #0
 8005ee4:	da09      	bge.n	8005efa <__kernel_rem_pio2+0x5c2>
 8005ee6:	f1b9 0f00 	cmp.w	r9, #0
 8005eea:	d002      	beq.n	8005ef2 <__kernel_rem_pio2+0x5ba>
 8005eec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	9b04      	ldr	r3, [sp, #16]
 8005ef4:	e9c3 0100 	strd	r0, r1, [r3]
 8005ef8:	e78f      	b.n	8005e1a <__kernel_rem_pio2+0x4e2>
 8005efa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005efe:	f7fa f971 	bl	80001e4 <__adddf3>
 8005f02:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005f06:	e7eb      	b.n	8005ee0 <__kernel_rem_pio2+0x5a8>
 8005f08:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005f0c:	f7fa f96a 	bl	80001e4 <__adddf3>
 8005f10:	3c01      	subs	r4, #1
 8005f12:	e7c1      	b.n	8005e98 <__kernel_rem_pio2+0x560>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	e7c6      	b.n	8005ea8 <__kernel_rem_pio2+0x570>
 8005f1a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005f1e:	f7fa f961 	bl	80001e4 <__adddf3>
 8005f22:	3401      	adds	r4, #1
 8005f24:	e7cb      	b.n	8005ebe <__kernel_rem_pio2+0x586>
 8005f26:	ed95 7b00 	vldr	d7, [r5]
 8005f2a:	ed8d 7b00 	vstr	d7, [sp]
 8005f2e:	ed95 7b02 	vldr	d7, [r5, #8]
 8005f32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f36:	ec53 2b17 	vmov	r2, r3, d7
 8005f3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005f3e:	f7fa f951 	bl	80001e4 <__adddf3>
 8005f42:	4602      	mov	r2, r0
 8005f44:	460b      	mov	r3, r1
 8005f46:	4606      	mov	r6, r0
 8005f48:	460f      	mov	r7, r1
 8005f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f4e:	f7fa f947 	bl	80001e0 <__aeabi_dsub>
 8005f52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f56:	f7fa f945 	bl	80001e4 <__adddf3>
 8005f5a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005f5e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8005f62:	e9c5 6700 	strd	r6, r7, [r5]
 8005f66:	e76d      	b.n	8005e44 <__kernel_rem_pio2+0x50c>
 8005f68:	ed94 7b00 	vldr	d7, [r4]
 8005f6c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8005f70:	ec51 0b17 	vmov	r0, r1, d7
 8005f74:	4652      	mov	r2, sl
 8005f76:	465b      	mov	r3, fp
 8005f78:	ed8d 7b00 	vstr	d7, [sp]
 8005f7c:	f7fa f932 	bl	80001e4 <__adddf3>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f8c:	f7fa f928 	bl	80001e0 <__aeabi_dsub>
 8005f90:	4652      	mov	r2, sl
 8005f92:	465b      	mov	r3, fp
 8005f94:	f7fa f926 	bl	80001e4 <__adddf3>
 8005f98:	3d01      	subs	r5, #1
 8005f9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f9e:	e9c4 6700 	strd	r6, r7, [r4]
 8005fa2:	e755      	b.n	8005e50 <__kernel_rem_pio2+0x518>
 8005fa4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005fa8:	f7fa f91c 	bl	80001e4 <__adddf3>
 8005fac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005fb0:	e758      	b.n	8005e64 <__kernel_rem_pio2+0x52c>
 8005fb2:	bf00      	nop
 8005fb4:	f3af 8000 	nop.w
	...
 8005fc0:	41700000 	.word	0x41700000
 8005fc4:	3e700000 	.word	0x3e700000
 8005fc8:	9b04      	ldr	r3, [sp, #16]
 8005fca:	9a04      	ldr	r2, [sp, #16]
 8005fcc:	601f      	str	r7, [r3, #0]
 8005fce:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005fd2:	605c      	str	r4, [r3, #4]
 8005fd4:	609d      	str	r5, [r3, #8]
 8005fd6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005fda:	60d3      	str	r3, [r2, #12]
 8005fdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005fe0:	6110      	str	r0, [r2, #16]
 8005fe2:	6153      	str	r3, [r2, #20]
 8005fe4:	e719      	b.n	8005e1a <__kernel_rem_pio2+0x4e2>
 8005fe6:	bf00      	nop

08005fe8 <__kernel_cos>:
 8005fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	ec57 6b10 	vmov	r6, r7, d0
 8005ff0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005ff4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005ff8:	ed8d 1b00 	vstr	d1, [sp]
 8005ffc:	d206      	bcs.n	800600c <__kernel_cos+0x24>
 8005ffe:	4630      	mov	r0, r6
 8006000:	4639      	mov	r1, r7
 8006002:	f7fa fd55 	bl	8000ab0 <__aeabi_d2iz>
 8006006:	2800      	cmp	r0, #0
 8006008:	f000 8088 	beq.w	800611c <__kernel_cos+0x134>
 800600c:	4632      	mov	r2, r6
 800600e:	463b      	mov	r3, r7
 8006010:	4630      	mov	r0, r6
 8006012:	4639      	mov	r1, r7
 8006014:	f7fa fa9c 	bl	8000550 <__aeabi_dmul>
 8006018:	4b51      	ldr	r3, [pc, #324]	@ (8006160 <__kernel_cos+0x178>)
 800601a:	2200      	movs	r2, #0
 800601c:	4604      	mov	r4, r0
 800601e:	460d      	mov	r5, r1
 8006020:	f7fa fa96 	bl	8000550 <__aeabi_dmul>
 8006024:	a340      	add	r3, pc, #256	@ (adr r3, 8006128 <__kernel_cos+0x140>)
 8006026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602a:	4682      	mov	sl, r0
 800602c:	468b      	mov	fp, r1
 800602e:	4620      	mov	r0, r4
 8006030:	4629      	mov	r1, r5
 8006032:	f7fa fa8d 	bl	8000550 <__aeabi_dmul>
 8006036:	a33e      	add	r3, pc, #248	@ (adr r3, 8006130 <__kernel_cos+0x148>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	f7fa f8d2 	bl	80001e4 <__adddf3>
 8006040:	4622      	mov	r2, r4
 8006042:	462b      	mov	r3, r5
 8006044:	f7fa fa84 	bl	8000550 <__aeabi_dmul>
 8006048:	a33b      	add	r3, pc, #236	@ (adr r3, 8006138 <__kernel_cos+0x150>)
 800604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604e:	f7fa f8c7 	bl	80001e0 <__aeabi_dsub>
 8006052:	4622      	mov	r2, r4
 8006054:	462b      	mov	r3, r5
 8006056:	f7fa fa7b 	bl	8000550 <__aeabi_dmul>
 800605a:	a339      	add	r3, pc, #228	@ (adr r3, 8006140 <__kernel_cos+0x158>)
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f7fa f8c0 	bl	80001e4 <__adddf3>
 8006064:	4622      	mov	r2, r4
 8006066:	462b      	mov	r3, r5
 8006068:	f7fa fa72 	bl	8000550 <__aeabi_dmul>
 800606c:	a336      	add	r3, pc, #216	@ (adr r3, 8006148 <__kernel_cos+0x160>)
 800606e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006072:	f7fa f8b5 	bl	80001e0 <__aeabi_dsub>
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	f7fa fa69 	bl	8000550 <__aeabi_dmul>
 800607e:	a334      	add	r3, pc, #208	@ (adr r3, 8006150 <__kernel_cos+0x168>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa f8ae 	bl	80001e4 <__adddf3>
 8006088:	4622      	mov	r2, r4
 800608a:	462b      	mov	r3, r5
 800608c:	f7fa fa60 	bl	8000550 <__aeabi_dmul>
 8006090:	4622      	mov	r2, r4
 8006092:	462b      	mov	r3, r5
 8006094:	f7fa fa5c 	bl	8000550 <__aeabi_dmul>
 8006098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800609c:	4604      	mov	r4, r0
 800609e:	460d      	mov	r5, r1
 80060a0:	4630      	mov	r0, r6
 80060a2:	4639      	mov	r1, r7
 80060a4:	f7fa fa54 	bl	8000550 <__aeabi_dmul>
 80060a8:	460b      	mov	r3, r1
 80060aa:	4602      	mov	r2, r0
 80060ac:	4629      	mov	r1, r5
 80060ae:	4620      	mov	r0, r4
 80060b0:	f7fa f896 	bl	80001e0 <__aeabi_dsub>
 80060b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006164 <__kernel_cos+0x17c>)
 80060b6:	4598      	cmp	r8, r3
 80060b8:	4606      	mov	r6, r0
 80060ba:	460f      	mov	r7, r1
 80060bc:	d810      	bhi.n	80060e0 <__kernel_cos+0xf8>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4650      	mov	r0, sl
 80060c4:	4659      	mov	r1, fp
 80060c6:	f7fa f88b 	bl	80001e0 <__aeabi_dsub>
 80060ca:	460b      	mov	r3, r1
 80060cc:	4926      	ldr	r1, [pc, #152]	@ (8006168 <__kernel_cos+0x180>)
 80060ce:	4602      	mov	r2, r0
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7fa f885 	bl	80001e0 <__aeabi_dsub>
 80060d6:	ec41 0b10 	vmov	d0, r0, r1
 80060da:	b003      	add	sp, #12
 80060dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e0:	4b22      	ldr	r3, [pc, #136]	@ (800616c <__kernel_cos+0x184>)
 80060e2:	4921      	ldr	r1, [pc, #132]	@ (8006168 <__kernel_cos+0x180>)
 80060e4:	4598      	cmp	r8, r3
 80060e6:	bf8c      	ite	hi
 80060e8:	4d21      	ldrhi	r5, [pc, #132]	@ (8006170 <__kernel_cos+0x188>)
 80060ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80060ee:	2400      	movs	r4, #0
 80060f0:	4622      	mov	r2, r4
 80060f2:	462b      	mov	r3, r5
 80060f4:	2000      	movs	r0, #0
 80060f6:	f7fa f873 	bl	80001e0 <__aeabi_dsub>
 80060fa:	4622      	mov	r2, r4
 80060fc:	4680      	mov	r8, r0
 80060fe:	4689      	mov	r9, r1
 8006100:	462b      	mov	r3, r5
 8006102:	4650      	mov	r0, sl
 8006104:	4659      	mov	r1, fp
 8006106:	f7fa f86b 	bl	80001e0 <__aeabi_dsub>
 800610a:	4632      	mov	r2, r6
 800610c:	463b      	mov	r3, r7
 800610e:	f7fa f867 	bl	80001e0 <__aeabi_dsub>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4640      	mov	r0, r8
 8006118:	4649      	mov	r1, r9
 800611a:	e7da      	b.n	80060d2 <__kernel_cos+0xea>
 800611c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006158 <__kernel_cos+0x170>
 8006120:	e7db      	b.n	80060da <__kernel_cos+0xf2>
 8006122:	bf00      	nop
 8006124:	f3af 8000 	nop.w
 8006128:	be8838d4 	.word	0xbe8838d4
 800612c:	bda8fae9 	.word	0xbda8fae9
 8006130:	bdb4b1c4 	.word	0xbdb4b1c4
 8006134:	3e21ee9e 	.word	0x3e21ee9e
 8006138:	809c52ad 	.word	0x809c52ad
 800613c:	3e927e4f 	.word	0x3e927e4f
 8006140:	19cb1590 	.word	0x19cb1590
 8006144:	3efa01a0 	.word	0x3efa01a0
 8006148:	16c15177 	.word	0x16c15177
 800614c:	3f56c16c 	.word	0x3f56c16c
 8006150:	5555554c 	.word	0x5555554c
 8006154:	3fa55555 	.word	0x3fa55555
 8006158:	00000000 	.word	0x00000000
 800615c:	3ff00000 	.word	0x3ff00000
 8006160:	3fe00000 	.word	0x3fe00000
 8006164:	3fd33332 	.word	0x3fd33332
 8006168:	3ff00000 	.word	0x3ff00000
 800616c:	3fe90000 	.word	0x3fe90000
 8006170:	3fd20000 	.word	0x3fd20000
 8006174:	00000000 	.word	0x00000000

08006178 <__kernel_sin>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	ec55 4b10 	vmov	r4, r5, d0
 8006180:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006184:	b085      	sub	sp, #20
 8006186:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800618a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800618e:	4680      	mov	r8, r0
 8006190:	d205      	bcs.n	800619e <__kernel_sin+0x26>
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f7fa fc8b 	bl	8000ab0 <__aeabi_d2iz>
 800619a:	2800      	cmp	r0, #0
 800619c:	d052      	beq.n	8006244 <__kernel_sin+0xcc>
 800619e:	4622      	mov	r2, r4
 80061a0:	462b      	mov	r3, r5
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	f7fa f9d3 	bl	8000550 <__aeabi_dmul>
 80061aa:	4682      	mov	sl, r0
 80061ac:	468b      	mov	fp, r1
 80061ae:	4602      	mov	r2, r0
 80061b0:	460b      	mov	r3, r1
 80061b2:	4620      	mov	r0, r4
 80061b4:	4629      	mov	r1, r5
 80061b6:	f7fa f9cb 	bl	8000550 <__aeabi_dmul>
 80061ba:	a342      	add	r3, pc, #264	@ (adr r3, 80062c4 <__kernel_sin+0x14c>)
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	e9cd 0100 	strd	r0, r1, [sp]
 80061c4:	4650      	mov	r0, sl
 80061c6:	4659      	mov	r1, fp
 80061c8:	f7fa f9c2 	bl	8000550 <__aeabi_dmul>
 80061cc:	a33f      	add	r3, pc, #252	@ (adr r3, 80062cc <__kernel_sin+0x154>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f7fa f805 	bl	80001e0 <__aeabi_dsub>
 80061d6:	4652      	mov	r2, sl
 80061d8:	465b      	mov	r3, fp
 80061da:	f7fa f9b9 	bl	8000550 <__aeabi_dmul>
 80061de:	a33d      	add	r3, pc, #244	@ (adr r3, 80062d4 <__kernel_sin+0x15c>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7f9 fffe 	bl	80001e4 <__adddf3>
 80061e8:	4652      	mov	r2, sl
 80061ea:	465b      	mov	r3, fp
 80061ec:	f7fa f9b0 	bl	8000550 <__aeabi_dmul>
 80061f0:	a33a      	add	r3, pc, #232	@ (adr r3, 80062dc <__kernel_sin+0x164>)
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f7f9 fff3 	bl	80001e0 <__aeabi_dsub>
 80061fa:	4652      	mov	r2, sl
 80061fc:	465b      	mov	r3, fp
 80061fe:	f7fa f9a7 	bl	8000550 <__aeabi_dmul>
 8006202:	a338      	add	r3, pc, #224	@ (adr r3, 80062e4 <__kernel_sin+0x16c>)
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	f7f9 ffec 	bl	80001e4 <__adddf3>
 800620c:	4606      	mov	r6, r0
 800620e:	460f      	mov	r7, r1
 8006210:	f1b8 0f00 	cmp.w	r8, #0
 8006214:	d11b      	bne.n	800624e <__kernel_sin+0xd6>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	4650      	mov	r0, sl
 800621c:	4659      	mov	r1, fp
 800621e:	f7fa f997 	bl	8000550 <__aeabi_dmul>
 8006222:	a325      	add	r3, pc, #148	@ (adr r3, 80062b8 <__kernel_sin+0x140>)
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f7f9 ffda 	bl	80001e0 <__aeabi_dsub>
 800622c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006230:	f7fa f98e 	bl	8000550 <__aeabi_dmul>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4620      	mov	r0, r4
 800623a:	4629      	mov	r1, r5
 800623c:	f7f9 ffd2 	bl	80001e4 <__adddf3>
 8006240:	4604      	mov	r4, r0
 8006242:	460d      	mov	r5, r1
 8006244:	ec45 4b10 	vmov	d0, r4, r5
 8006248:	b005      	add	sp, #20
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800624e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006252:	4b1b      	ldr	r3, [pc, #108]	@ (80062c0 <__kernel_sin+0x148>)
 8006254:	2200      	movs	r2, #0
 8006256:	f7fa f97b 	bl	8000550 <__aeabi_dmul>
 800625a:	4632      	mov	r2, r6
 800625c:	4680      	mov	r8, r0
 800625e:	4689      	mov	r9, r1
 8006260:	463b      	mov	r3, r7
 8006262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006266:	f7fa f973 	bl	8000550 <__aeabi_dmul>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4640      	mov	r0, r8
 8006270:	4649      	mov	r1, r9
 8006272:	f7f9 ffb5 	bl	80001e0 <__aeabi_dsub>
 8006276:	4652      	mov	r2, sl
 8006278:	465b      	mov	r3, fp
 800627a:	f7fa f969 	bl	8000550 <__aeabi_dmul>
 800627e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006282:	f7f9 ffad 	bl	80001e0 <__aeabi_dsub>
 8006286:	a30c      	add	r3, pc, #48	@ (adr r3, 80062b8 <__kernel_sin+0x140>)
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006294:	f7fa f95c 	bl	8000550 <__aeabi_dmul>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4630      	mov	r0, r6
 800629e:	4639      	mov	r1, r7
 80062a0:	f7f9 ffa0 	bl	80001e4 <__adddf3>
 80062a4:	4602      	mov	r2, r0
 80062a6:	460b      	mov	r3, r1
 80062a8:	4620      	mov	r0, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	f7f9 ff98 	bl	80001e0 <__aeabi_dsub>
 80062b0:	e7c6      	b.n	8006240 <__kernel_sin+0xc8>
 80062b2:	bf00      	nop
 80062b4:	f3af 8000 	nop.w
 80062b8:	55555549 	.word	0x55555549
 80062bc:	3fc55555 	.word	0x3fc55555
 80062c0:	3fe00000 	.word	0x3fe00000
 80062c4:	5acfd57c 	.word	0x5acfd57c
 80062c8:	3de5d93a 	.word	0x3de5d93a
 80062cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80062d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80062d4:	57b1fe7d 	.word	0x57b1fe7d
 80062d8:	3ec71de3 	.word	0x3ec71de3
 80062dc:	19c161d5 	.word	0x19c161d5
 80062e0:	3f2a01a0 	.word	0x3f2a01a0
 80062e4:	1110f8a6 	.word	0x1110f8a6
 80062e8:	3f811111 	.word	0x3f811111

080062ec <fabs>:
 80062ec:	ec51 0b10 	vmov	r0, r1, d0
 80062f0:	4602      	mov	r2, r0
 80062f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062f6:	ec43 2b10 	vmov	d0, r2, r3
 80062fa:	4770      	bx	lr
 80062fc:	0000      	movs	r0, r0
	...

08006300 <scalbn>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	ec55 4b10 	vmov	r4, r5, d0
 8006306:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800630a:	4606      	mov	r6, r0
 800630c:	462b      	mov	r3, r5
 800630e:	b991      	cbnz	r1, 8006336 <scalbn+0x36>
 8006310:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006314:	4323      	orrs	r3, r4
 8006316:	d03d      	beq.n	8006394 <scalbn+0x94>
 8006318:	4b35      	ldr	r3, [pc, #212]	@ (80063f0 <scalbn+0xf0>)
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	2200      	movs	r2, #0
 8006320:	f7fa f916 	bl	8000550 <__aeabi_dmul>
 8006324:	4b33      	ldr	r3, [pc, #204]	@ (80063f4 <scalbn+0xf4>)
 8006326:	429e      	cmp	r6, r3
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	da0f      	bge.n	800634e <scalbn+0x4e>
 800632e:	a328      	add	r3, pc, #160	@ (adr r3, 80063d0 <scalbn+0xd0>)
 8006330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006334:	e01e      	b.n	8006374 <scalbn+0x74>
 8006336:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800633a:	4291      	cmp	r1, r2
 800633c:	d10b      	bne.n	8006356 <scalbn+0x56>
 800633e:	4622      	mov	r2, r4
 8006340:	4620      	mov	r0, r4
 8006342:	4629      	mov	r1, r5
 8006344:	f7f9 ff4e 	bl	80001e4 <__adddf3>
 8006348:	4604      	mov	r4, r0
 800634a:	460d      	mov	r5, r1
 800634c:	e022      	b.n	8006394 <scalbn+0x94>
 800634e:	460b      	mov	r3, r1
 8006350:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006354:	3936      	subs	r1, #54	@ 0x36
 8006356:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800635a:	4296      	cmp	r6, r2
 800635c:	dd0d      	ble.n	800637a <scalbn+0x7a>
 800635e:	2d00      	cmp	r5, #0
 8006360:	a11d      	add	r1, pc, #116	@ (adr r1, 80063d8 <scalbn+0xd8>)
 8006362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006366:	da02      	bge.n	800636e <scalbn+0x6e>
 8006368:	a11d      	add	r1, pc, #116	@ (adr r1, 80063e0 <scalbn+0xe0>)
 800636a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800636e:	a31a      	add	r3, pc, #104	@ (adr r3, 80063d8 <scalbn+0xd8>)
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f7fa f8ec 	bl	8000550 <__aeabi_dmul>
 8006378:	e7e6      	b.n	8006348 <scalbn+0x48>
 800637a:	1872      	adds	r2, r6, r1
 800637c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006380:	428a      	cmp	r2, r1
 8006382:	dcec      	bgt.n	800635e <scalbn+0x5e>
 8006384:	2a00      	cmp	r2, #0
 8006386:	dd08      	ble.n	800639a <scalbn+0x9a>
 8006388:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800638c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006390:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006394:	ec45 4b10 	vmov	d0, r4, r5
 8006398:	bd70      	pop	{r4, r5, r6, pc}
 800639a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800639e:	da08      	bge.n	80063b2 <scalbn+0xb2>
 80063a0:	2d00      	cmp	r5, #0
 80063a2:	a10b      	add	r1, pc, #44	@ (adr r1, 80063d0 <scalbn+0xd0>)
 80063a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a8:	dac1      	bge.n	800632e <scalbn+0x2e>
 80063aa:	a10f      	add	r1, pc, #60	@ (adr r1, 80063e8 <scalbn+0xe8>)
 80063ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b0:	e7bd      	b.n	800632e <scalbn+0x2e>
 80063b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80063b6:	3236      	adds	r2, #54	@ 0x36
 80063b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80063bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80063c0:	4620      	mov	r0, r4
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <scalbn+0xf8>)
 80063c4:	4629      	mov	r1, r5
 80063c6:	2200      	movs	r2, #0
 80063c8:	e7d4      	b.n	8006374 <scalbn+0x74>
 80063ca:	bf00      	nop
 80063cc:	f3af 8000 	nop.w
 80063d0:	c2f8f359 	.word	0xc2f8f359
 80063d4:	01a56e1f 	.word	0x01a56e1f
 80063d8:	8800759c 	.word	0x8800759c
 80063dc:	7e37e43c 	.word	0x7e37e43c
 80063e0:	8800759c 	.word	0x8800759c
 80063e4:	fe37e43c 	.word	0xfe37e43c
 80063e8:	c2f8f359 	.word	0xc2f8f359
 80063ec:	81a56e1f 	.word	0x81a56e1f
 80063f0:	43500000 	.word	0x43500000
 80063f4:	ffff3cb0 	.word	0xffff3cb0
 80063f8:	3c900000 	.word	0x3c900000

080063fc <__ieee754_sqrt>:
 80063fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006400:	4a68      	ldr	r2, [pc, #416]	@ (80065a4 <__ieee754_sqrt+0x1a8>)
 8006402:	ec55 4b10 	vmov	r4, r5, d0
 8006406:	43aa      	bics	r2, r5
 8006408:	462b      	mov	r3, r5
 800640a:	4621      	mov	r1, r4
 800640c:	d110      	bne.n	8006430 <__ieee754_sqrt+0x34>
 800640e:	4622      	mov	r2, r4
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	f7fa f89c 	bl	8000550 <__aeabi_dmul>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4620      	mov	r0, r4
 800641e:	4629      	mov	r1, r5
 8006420:	f7f9 fee0 	bl	80001e4 <__adddf3>
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	ec45 4b10 	vmov	d0, r4, r5
 800642c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	2d00      	cmp	r5, #0
 8006432:	dc0e      	bgt.n	8006452 <__ieee754_sqrt+0x56>
 8006434:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006438:	4322      	orrs	r2, r4
 800643a:	d0f5      	beq.n	8006428 <__ieee754_sqrt+0x2c>
 800643c:	b19d      	cbz	r5, 8006466 <__ieee754_sqrt+0x6a>
 800643e:	4622      	mov	r2, r4
 8006440:	4620      	mov	r0, r4
 8006442:	4629      	mov	r1, r5
 8006444:	f7f9 fecc 	bl	80001e0 <__aeabi_dsub>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	f7fa f9aa 	bl	80007a4 <__aeabi_ddiv>
 8006450:	e7e8      	b.n	8006424 <__ieee754_sqrt+0x28>
 8006452:	152a      	asrs	r2, r5, #20
 8006454:	d115      	bne.n	8006482 <__ieee754_sqrt+0x86>
 8006456:	2000      	movs	r0, #0
 8006458:	e009      	b.n	800646e <__ieee754_sqrt+0x72>
 800645a:	0acb      	lsrs	r3, r1, #11
 800645c:	3a15      	subs	r2, #21
 800645e:	0549      	lsls	r1, r1, #21
 8006460:	2b00      	cmp	r3, #0
 8006462:	d0fa      	beq.n	800645a <__ieee754_sqrt+0x5e>
 8006464:	e7f7      	b.n	8006456 <__ieee754_sqrt+0x5a>
 8006466:	462a      	mov	r2, r5
 8006468:	e7fa      	b.n	8006460 <__ieee754_sqrt+0x64>
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	3001      	adds	r0, #1
 800646e:	02dc      	lsls	r4, r3, #11
 8006470:	d5fb      	bpl.n	800646a <__ieee754_sqrt+0x6e>
 8006472:	1e44      	subs	r4, r0, #1
 8006474:	1b12      	subs	r2, r2, r4
 8006476:	f1c0 0420 	rsb	r4, r0, #32
 800647a:	fa21 f404 	lsr.w	r4, r1, r4
 800647e:	4323      	orrs	r3, r4
 8006480:	4081      	lsls	r1, r0
 8006482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006486:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800648a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800648e:	07d2      	lsls	r2, r2, #31
 8006490:	bf5c      	itt	pl
 8006492:	005b      	lslpl	r3, r3, #1
 8006494:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006498:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800649c:	bf58      	it	pl
 800649e:	0049      	lslpl	r1, r1, #1
 80064a0:	2600      	movs	r6, #0
 80064a2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80064a6:	106d      	asrs	r5, r5, #1
 80064a8:	0049      	lsls	r1, r1, #1
 80064aa:	2016      	movs	r0, #22
 80064ac:	4632      	mov	r2, r6
 80064ae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80064b2:	1917      	adds	r7, r2, r4
 80064b4:	429f      	cmp	r7, r3
 80064b6:	bfde      	ittt	le
 80064b8:	193a      	addle	r2, r7, r4
 80064ba:	1bdb      	suble	r3, r3, r7
 80064bc:	1936      	addle	r6, r6, r4
 80064be:	0fcf      	lsrs	r7, r1, #31
 80064c0:	3801      	subs	r0, #1
 80064c2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80064c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80064ca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80064ce:	d1f0      	bne.n	80064b2 <__ieee754_sqrt+0xb6>
 80064d0:	4604      	mov	r4, r0
 80064d2:	2720      	movs	r7, #32
 80064d4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80064d8:	429a      	cmp	r2, r3
 80064da:	eb00 0e0c 	add.w	lr, r0, ip
 80064de:	db02      	blt.n	80064e6 <__ieee754_sqrt+0xea>
 80064e0:	d113      	bne.n	800650a <__ieee754_sqrt+0x10e>
 80064e2:	458e      	cmp	lr, r1
 80064e4:	d811      	bhi.n	800650a <__ieee754_sqrt+0x10e>
 80064e6:	f1be 0f00 	cmp.w	lr, #0
 80064ea:	eb0e 000c 	add.w	r0, lr, ip
 80064ee:	da42      	bge.n	8006576 <__ieee754_sqrt+0x17a>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	db40      	blt.n	8006576 <__ieee754_sqrt+0x17a>
 80064f4:	f102 0801 	add.w	r8, r2, #1
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	458e      	cmp	lr, r1
 80064fc:	bf88      	it	hi
 80064fe:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8006502:	eba1 010e 	sub.w	r1, r1, lr
 8006506:	4464      	add	r4, ip
 8006508:	4642      	mov	r2, r8
 800650a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800650e:	3f01      	subs	r7, #1
 8006510:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006514:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006518:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800651c:	d1dc      	bne.n	80064d8 <__ieee754_sqrt+0xdc>
 800651e:	4319      	orrs	r1, r3
 8006520:	d01b      	beq.n	800655a <__ieee754_sqrt+0x15e>
 8006522:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80065a8 <__ieee754_sqrt+0x1ac>
 8006526:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80065ac <__ieee754_sqrt+0x1b0>
 800652a:	e9da 0100 	ldrd	r0, r1, [sl]
 800652e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006532:	f7f9 fe55 	bl	80001e0 <__aeabi_dsub>
 8006536:	e9da 8900 	ldrd	r8, r9, [sl]
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4640      	mov	r0, r8
 8006540:	4649      	mov	r1, r9
 8006542:	f7fa fa81 	bl	8000a48 <__aeabi_dcmple>
 8006546:	b140      	cbz	r0, 800655a <__ieee754_sqrt+0x15e>
 8006548:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800654c:	e9da 0100 	ldrd	r0, r1, [sl]
 8006550:	e9db 2300 	ldrd	r2, r3, [fp]
 8006554:	d111      	bne.n	800657a <__ieee754_sqrt+0x17e>
 8006556:	3601      	adds	r6, #1
 8006558:	463c      	mov	r4, r7
 800655a:	1072      	asrs	r2, r6, #1
 800655c:	0863      	lsrs	r3, r4, #1
 800655e:	07f1      	lsls	r1, r6, #31
 8006560:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006564:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006568:	bf48      	it	mi
 800656a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800656e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006572:	4618      	mov	r0, r3
 8006574:	e756      	b.n	8006424 <__ieee754_sqrt+0x28>
 8006576:	4690      	mov	r8, r2
 8006578:	e7be      	b.n	80064f8 <__ieee754_sqrt+0xfc>
 800657a:	f7f9 fe33 	bl	80001e4 <__adddf3>
 800657e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4640      	mov	r0, r8
 8006588:	4649      	mov	r1, r9
 800658a:	f7fa fa53 	bl	8000a34 <__aeabi_dcmplt>
 800658e:	b120      	cbz	r0, 800659a <__ieee754_sqrt+0x19e>
 8006590:	1ca0      	adds	r0, r4, #2
 8006592:	bf08      	it	eq
 8006594:	3601      	addeq	r6, #1
 8006596:	3402      	adds	r4, #2
 8006598:	e7df      	b.n	800655a <__ieee754_sqrt+0x15e>
 800659a:	1c63      	adds	r3, r4, #1
 800659c:	f023 0401 	bic.w	r4, r3, #1
 80065a0:	e7db      	b.n	800655a <__ieee754_sqrt+0x15e>
 80065a2:	bf00      	nop
 80065a4:	7ff00000 	.word	0x7ff00000
 80065a8:	20000078 	.word	0x20000078
 80065ac:	20000070 	.word	0x20000070

080065b0 <floor>:
 80065b0:	ec51 0b10 	vmov	r0, r1, d0
 80065b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80065c0:	2e13      	cmp	r6, #19
 80065c2:	460c      	mov	r4, r1
 80065c4:	4605      	mov	r5, r0
 80065c6:	4680      	mov	r8, r0
 80065c8:	dc34      	bgt.n	8006634 <floor+0x84>
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	da17      	bge.n	80065fe <floor+0x4e>
 80065ce:	a332      	add	r3, pc, #200	@ (adr r3, 8006698 <floor+0xe8>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7f9 fe06 	bl	80001e4 <__adddf3>
 80065d8:	2200      	movs	r2, #0
 80065da:	2300      	movs	r3, #0
 80065dc:	f7fa fa48 	bl	8000a70 <__aeabi_dcmpgt>
 80065e0:	b150      	cbz	r0, 80065f8 <floor+0x48>
 80065e2:	2c00      	cmp	r4, #0
 80065e4:	da55      	bge.n	8006692 <floor+0xe2>
 80065e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80065ea:	432c      	orrs	r4, r5
 80065ec:	2500      	movs	r5, #0
 80065ee:	42ac      	cmp	r4, r5
 80065f0:	4c2b      	ldr	r4, [pc, #172]	@ (80066a0 <floor+0xf0>)
 80065f2:	bf08      	it	eq
 80065f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80065f8:	4621      	mov	r1, r4
 80065fa:	4628      	mov	r0, r5
 80065fc:	e023      	b.n	8006646 <floor+0x96>
 80065fe:	4f29      	ldr	r7, [pc, #164]	@ (80066a4 <floor+0xf4>)
 8006600:	4137      	asrs	r7, r6
 8006602:	ea01 0307 	and.w	r3, r1, r7
 8006606:	4303      	orrs	r3, r0
 8006608:	d01d      	beq.n	8006646 <floor+0x96>
 800660a:	a323      	add	r3, pc, #140	@ (adr r3, 8006698 <floor+0xe8>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 fde8 	bl	80001e4 <__adddf3>
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	f7fa fa2a 	bl	8000a70 <__aeabi_dcmpgt>
 800661c:	2800      	cmp	r0, #0
 800661e:	d0eb      	beq.n	80065f8 <floor+0x48>
 8006620:	2c00      	cmp	r4, #0
 8006622:	bfbe      	ittt	lt
 8006624:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006628:	4133      	asrlt	r3, r6
 800662a:	18e4      	addlt	r4, r4, r3
 800662c:	ea24 0407 	bic.w	r4, r4, r7
 8006630:	2500      	movs	r5, #0
 8006632:	e7e1      	b.n	80065f8 <floor+0x48>
 8006634:	2e33      	cmp	r6, #51	@ 0x33
 8006636:	dd0a      	ble.n	800664e <floor+0x9e>
 8006638:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800663c:	d103      	bne.n	8006646 <floor+0x96>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	f7f9 fdcf 	bl	80001e4 <__adddf3>
 8006646:	ec41 0b10 	vmov	d0, r0, r1
 800664a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800664e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006652:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006656:	40df      	lsrs	r7, r3
 8006658:	4207      	tst	r7, r0
 800665a:	d0f4      	beq.n	8006646 <floor+0x96>
 800665c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006698 <floor+0xe8>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7f9 fdbf 	bl	80001e4 <__adddf3>
 8006666:	2200      	movs	r2, #0
 8006668:	2300      	movs	r3, #0
 800666a:	f7fa fa01 	bl	8000a70 <__aeabi_dcmpgt>
 800666e:	2800      	cmp	r0, #0
 8006670:	d0c2      	beq.n	80065f8 <floor+0x48>
 8006672:	2c00      	cmp	r4, #0
 8006674:	da0a      	bge.n	800668c <floor+0xdc>
 8006676:	2e14      	cmp	r6, #20
 8006678:	d101      	bne.n	800667e <floor+0xce>
 800667a:	3401      	adds	r4, #1
 800667c:	e006      	b.n	800668c <floor+0xdc>
 800667e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006682:	2301      	movs	r3, #1
 8006684:	40b3      	lsls	r3, r6
 8006686:	441d      	add	r5, r3
 8006688:	4545      	cmp	r5, r8
 800668a:	d3f6      	bcc.n	800667a <floor+0xca>
 800668c:	ea25 0507 	bic.w	r5, r5, r7
 8006690:	e7b2      	b.n	80065f8 <floor+0x48>
 8006692:	2500      	movs	r5, #0
 8006694:	462c      	mov	r4, r5
 8006696:	e7af      	b.n	80065f8 <floor+0x48>
 8006698:	8800759c 	.word	0x8800759c
 800669c:	7e37e43c 	.word	0x7e37e43c
 80066a0:	bff00000 	.word	0xbff00000
 80066a4:	000fffff 	.word	0x000fffff

080066a8 <_init>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr

080066b4 <_fini>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	bf00      	nop
 80066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ba:	bc08      	pop	{r3}
 80066bc:	469e      	mov	lr, r3
 80066be:	4770      	bx	lr
